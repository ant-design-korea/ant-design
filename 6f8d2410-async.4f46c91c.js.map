{"version":3,"sources":["docs/react/customize-theme.zh-CN.md?type=text"],"sourcesContent":["\n  import '/home/runner/work/ant-design/ant-design/docs/react/customize-theme.zh-CN.md?watch=parent';\n  export const texts = [{\"value\":\"Ant Design 设计规范和技术上支持灵活的样式定制，以满足业务和品牌上多样化的视觉需求，包括但不限于全局样式（主色、圆角、边框）和指定组件的视觉定制。\",\"paraId\":0},{\"value\":\"在 5.0 版本的 Ant Design 中，我们提供了一套全新的定制主题方案。不同于 4.x 版本的 less 和 CSS 变量，有了 CSS-in-JS 的加持后，动态主题的能力也得到了加强，包括但不限于：\",\"paraId\":1},{\"value\":\"支持动态切换主题；\",\"paraId\":2},{\"value\":\"支持同时存在多个主题；\",\"paraId\":2},{\"value\":\"支持针对某个/某些组件修改主题变量；\",\"paraId\":2},{\"value\":\"...\",\"paraId\":2},{\"value\":\"在 5.0 版本中我们把影响主题的最小元素称为 \",\"paraId\":3,\"tocIndex\":0},{\"value\":\"Design Token\",\"paraId\":3,\"tocIndex\":0},{\"value\":\"。通过修改 Design Token，我们可以呈现出各种各样的主题或者组件。通过在 \",\"paraId\":3,\"tocIndex\":0},{\"value\":\"ConfigProvider\",\"paraId\":3,\"tocIndex\":0},{\"value\":\" 中传入 \",\"paraId\":3,\"tocIndex\":0},{\"value\":\"theme\",\"paraId\":3,\"tocIndex\":0},{\"value\":\" 属性，可以配置主题。在升级 v5 后，将默认使用 v5 的主题。\",\"paraId\":3,\"tocIndex\":0},{\"value\":\"ConfigProvider\",\"paraId\":4},{\"value\":\" 对 \",\"paraId\":4},{\"value\":\"message.xxx\",\"paraId\":4},{\"value\":\"、\",\"paraId\":4},{\"value\":\"Modal.xxx\",\"paraId\":4},{\"value\":\"、\",\"paraId\":4},{\"value\":\"notification.xxx\",\"paraId\":4},{\"value\":\" 等静态方法不会生效，原因是在这些方法中，antd 会通过 \",\"paraId\":4},{\"value\":\"ReactDOM.render\",\"paraId\":4},{\"value\":\" 动态创建新的 React 实体。其 context 与当前代码所在 context 并不相同，因而无法获取 context 信息。\",\"paraId\":4},{\"value\":\"当你需要 context 信息（例如 ConfigProvider 配置的内容）时，可以通过 \",\"paraId\":5},{\"value\":\"Modal.useModal\",\"paraId\":5},{\"value\":\" 方法返回 modal 实体以及 contextHolder 节点，将其插入到你需要获取 context 位置即可。也可通过 \",\"paraId\":5},{\"value\":\"App 包裹组件\",\"paraId\":6},{\"value\":\" 简化 useModal 等方法需要手动植入 contextHolder 的问题。\",\"paraId\":5},{\"value\":\"通过 \",\"paraId\":7,\"tocIndex\":1},{\"value\":\"theme\",\"paraId\":7,\"tocIndex\":1},{\"value\":\" 中的 \",\"paraId\":7,\"tocIndex\":1},{\"value\":\"token\",\"paraId\":7,\"tocIndex\":1},{\"value\":\" 属性，可以修改一些主题变量。部分主题变量会引起其他主题变量的变化，我们把这些主题变量称为 Seed Token。\",\"paraId\":7,\"tocIndex\":1},{\"value\":\"const sandpackConfig = {\\n  autorun: true,\\n};\\n\\nimport { Button, ConfigProvider, Space } from 'antd';\\nimport React from 'react';\\n\\nconst App: React.FC = () => (\\n  <ConfigProvider\\n    theme={{\\n      token: {\\n        // Seed Token，影响范围大\\n        colorPrimary: '#00b96b',\\n        borderRadius: 2,\\n\\n        // 派生变量，影响范围小\\n        colorBgContainer: '#f6ffed',\\n      },\\n    }}\\n  >\\n    <Space>\\n      <Button type=\\\"primary\\\">Primary</Button>\\n      <Button>Default</Button>\\n    </Space>\\n  </ConfigProvider>\\n);\\n\\nexport default App;\\n\",\"paraId\":8,\"tocIndex\":1},{\"value\":\"通过修改算法可以快速生成风格迥异的主题，5.0 版本中默认提供三套预设算法，分别是:\",\"paraId\":9,\"tocIndex\":2},{\"value\":\"默认算法 \",\"paraId\":10,\"tocIndex\":2},{\"value\":\"theme.defaultAlgorithm\",\"paraId\":10,\"tocIndex\":2},{\"value\":\"暗色算法 \",\"paraId\":10,\"tocIndex\":2},{\"value\":\"theme.darkAlgorithm\",\"paraId\":10,\"tocIndex\":2},{\"value\":\"紧凑算法 \",\"paraId\":10,\"tocIndex\":2},{\"value\":\"theme.compactAlgorithm\",\"paraId\":10,\"tocIndex\":2},{\"value\":\"你可以通过 \",\"paraId\":11,\"tocIndex\":2},{\"value\":\"theme\",\"paraId\":11,\"tocIndex\":2},{\"value\":\" 中的 \",\"paraId\":11,\"tocIndex\":2},{\"value\":\"algorithm\",\"paraId\":11,\"tocIndex\":2},{\"value\":\" 属性来切换算法，并且支持配置多种算法，将会依次生效。\",\"paraId\":11,\"tocIndex\":2},{\"value\":\"const sandpackConfig = {\\n  dark: true,\\n};\\n\\nimport React from 'react';\\nimport { Button, ConfigProvider, Input, Space, theme } from 'antd';\\n\\nconst App: React.FC = () => (\\n  <ConfigProvider\\n    theme={{\\n      // 1. 单独使用暗色算法\\n      algorithm: theme.darkAlgorithm,\\n\\n      // 2. 组合使用暗色算法与紧凑算法\\n      // algorithm: [theme.darkAlgorithm, theme.compactAlgorithm],\\n    }}\\n  >\\n    <Space>\\n      <Input placeholder=\\\"Please Input\\\" />\\n      <Button type=\\\"primary\\\">Submit</Button>\\n    </Space>\\n  </ConfigProvider>\\n);\\n\\nexport default App;\\n\",\"paraId\":12,\"tocIndex\":2},{\"value\":\"除了整体的 Design Token，各个组件也会开放自己的 Component Token 来实现针对组件的样式定制能力，不同的组件之间不会相互影响。同样地，也可以通过这种方式来覆盖组件的其他 Design Token。\",\"paraId\":13,\"tocIndex\":3},{\"value\":\"默认情况下，所有组件变量都仅仅是覆盖，不会基于 Seed Token 计算派生变量。\",\"paraId\":14},{\"value\":\"在 \",\"paraId\":15},{\"value\":\">= 5.8.0\",\"paraId\":15},{\"value\":\" 版本中，组件变量支持传入 \",\"paraId\":15},{\"value\":\"algorithm\",\"paraId\":15},{\"value\":\" 属性，可以开启派生计算或者传入其他算法。\",\"paraId\":15},{\"value\":\"import React from 'react';\\nimport { ConfigProvider, Button, Space, Input, Divider } from 'antd';\\n\\nconst App: React.FC = () => (\\n  <>\\n    <ConfigProvider\\n      theme={{\\n        components: {\\n          Button: {\\n            colorPrimary: '#00b96b',\\n            algorithm: true, // 启用算法\\n          },\\n          Input: {\\n            colorPrimary: '#eb2f96',\\n            algorithm: true, // 启用算法\\n          }\\n        },\\n      }}\\n    >\\n      <Space>\\n        <div style={{ fontSize: 14 }}>开启算法：</div>\\n        <Input placeholder=\\\"Please Input\\\" />\\n        <Button type=\\\"primary\\\">Submit</Button>\\n      </Space>\\n    </ConfigProvider>\\n    <Divider />\\n    <ConfigProvider\\n      theme={{\\n        components: {\\n          Button: {\\n            colorPrimary: '#00b96b',\\n          },\\n          Input: {\\n            colorPrimary: '#eb2f96',\\n          }\\n        },\\n      }}\\n    >\\n      <Space>\\n        <div style={{ fontSize: 14 }}>禁用算法：</div>\\n        <Input placeholder=\\\"Please Input\\\" />\\n        <Button type=\\\"primary\\\">Submit</Button>\\n      </Space>\\n    </ConfigProvider>\\n  </>\\n);\\n\\nexport default App;\\n\",\"paraId\":16},{\"value\":\"antd 默认内置了一些组件交互动效让企业级页面更加富有细节，在一些极端场景可能会影响页面交互性能，如需关闭动画可以 \",\"paraId\":17,\"tocIndex\":4},{\"value\":\"token\",\"paraId\":17,\"tocIndex\":4},{\"value\":\" 中的 \",\"paraId\":17,\"tocIndex\":4},{\"value\":\"motion\",\"paraId\":17,\"tocIndex\":4},{\"value\":\" 修改为 \",\"paraId\":17,\"tocIndex\":4},{\"value\":\"false\",\"paraId\":17,\"tocIndex\":4},{\"value\":\"：\",\"paraId\":17,\"tocIndex\":4},{\"value\":\"import React from 'react';\\nimport { Checkbox, Col, ConfigProvider, Flex, Radio, Row, Switch } from 'antd';\\n\\nconst App: React.FC = () => {\\n  const [checked, setChecked] = React.useState<boolean>(false);\\n  const timerRef = React.useRef<ReturnType<typeof setInterval>>();\\n  React.useEffect(() => {\\n    timerRef.current = setInterval(() => {\\n      setChecked((prev) => !prev);\\n    }, 500);\\n    return () => {\\n      if (timerRef.current) {\\n        clearInterval(timerRef.current);\\n      }\\n    };\\n  }, []);\\n\\n  const nodes = (\\n    <Flex gap=\\\"small\\\">\\n      <Checkbox checked={checked}>Checkbox</Checkbox>\\n      <Radio checked={checked}>Radio</Radio>\\n      <Switch checked={checked} />\\n    </Flex>\\n  );\\n\\n  return (\\n    <Row gutter={[24, 24]}>\\n      <Col span={24}>{nodes}</Col>\\n      <Col span={24}>\\n        <ConfigProvider theme={{ token: { motion: false } }}>{nodes}</ConfigProvider>\\n      </Col>\\n    </Row>\\n  );\\n};\\n\\nexport default App;\\n\",\"paraId\":18,\"tocIndex\":4},{\"value\":\"在 v5 中，动态切换主题对用户来说是非常简单的，你可以在任何时候通过 \",\"paraId\":19,\"tocIndex\":6},{\"value\":\"ConfigProvider\",\"paraId\":19,\"tocIndex\":6},{\"value\":\" 的 \",\"paraId\":19,\"tocIndex\":6},{\"value\":\"theme\",\"paraId\":19,\"tocIndex\":6},{\"value\":\" 属性来动态切换主题，而不需要任何额外配置。\",\"paraId\":19,\"tocIndex\":6},{\"value\":\"import { Button, ConfigProvider, Space, Input, ColorPicker, Divider } from 'antd';\\nimport React from 'react';\\n\\nconst App: React.FC = () => {\\n  const [primary, setPrimary] = React.useState('#1677ff');\\n\\n  return (\\n    <>\\n      <ColorPicker showText value={primary} onChangeComplete={(color) => setPrimary(color.toHexString())} />\\n      <Divider />\\n      <ConfigProvider\\n        theme={{\\n          token: {\\n            colorPrimary: primary,\\n          },\\n        }}\\n      >\\n        <Space>\\n          <Input placeholder=\\\"Please Input\\\" />\\n          <Button type=\\\"primary\\\">Submit</Button>\\n        </Space>\\n      </ConfigProvider>\\n    </>\\n  );\\n}\\n\\nexport default App;\\n\",\"paraId\":20,\"tocIndex\":6},{\"value\":\"可以嵌套使用 \",\"paraId\":21,\"tocIndex\":7},{\"value\":\"ConfigProvider\",\"paraId\":21,\"tocIndex\":7},{\"value\":\" 来实现局部主题的更换。在子主题中未被改变的 Design Token 将会继承父主题。\",\"paraId\":21,\"tocIndex\":7},{\"value\":\"import React from 'react';\\nimport { Button, ConfigProvider, Space } from 'antd';\\n\\nconst App: React.FC = () => (\\n  <ConfigProvider\\n    theme={{\\n      token: {\\n        colorPrimary: '#1677ff',\\n      },\\n    }}\\n  >\\n    <Space>\\n      <Button type=\\\"primary\\\">Theme 1</Button>\\n      <ConfigProvider\\n        theme={{\\n          token: {\\n            colorPrimary: '#00b96b',\\n          },\\n        }}\\n      >\\n        <Button type=\\\"primary\\\">Theme 2</Button>\\n      </ConfigProvider>\\n    </Space>\\n  </ConfigProvider>\\n);\\n\\nexport default App;\\n\",\"paraId\":22,\"tocIndex\":7},{\"value\":\"如果你希望使用当前主题下的 Design Token，我们提供了 \",\"paraId\":23,\"tocIndex\":8},{\"value\":\"useToken\",\"paraId\":23,\"tocIndex\":8},{\"value\":\" 这个 hook 来获取 Design Token。\",\"paraId\":23,\"tocIndex\":8},{\"value\":\"import React from 'react';\\nimport { Button, theme } from 'antd';\\n\\nconst { useToken } = theme;\\n\\nconst App: React.FC = () => {\\n  const { token } = useToken();\\n\\n  return (\\n    <div\\n      style={{\\n        backgroundColor: token.colorPrimaryBg,\\n        padding: token.padding,\\n        borderRadius: token.borderRadius,\\n        color: token.colorPrimaryText,\\n        fontSize: token.fontSize,\\n      }}\\n    >\\n      使用 Design Token\\n    </div>\\n  );\\n};\\n\\nexport default App;\\n\",\"paraId\":24,\"tocIndex\":8},{\"value\":\"当你需要非 React 生命周期消费 Token 变量时，可以通过静态方法 \",\"paraId\":25,\"tocIndex\":9},{\"value\":\"getDesignToken\",\"paraId\":25,\"tocIndex\":9},{\"value\":\" 将其导出：\",\"paraId\":25,\"tocIndex\":9},{\"value\":\"import { theme } from 'antd';\\n\\nconst { getDesignToken } = theme;\\n\\nconst globalToken = getDesignToken();\\n\",\"paraId\":26,\"tocIndex\":9},{\"value\":\"getDesignToken\",\"paraId\":27,\"tocIndex\":9},{\"value\":\" 和 ConfigProvider 一样，支持传入 \",\"paraId\":27,\"tocIndex\":9},{\"value\":\"theme\",\"paraId\":27,\"tocIndex\":9},{\"value\":\" 属性，用于获取指定主题的 Design Token。\",\"paraId\":27,\"tocIndex\":9},{\"value\":\"import type { ThemeConfig } from 'antd';\\nimport { theme } from 'antd';\\nimport { createRoot } from 'react-dom/client';\\n\\nconst { getDesignToken, useToken } = theme;\\n\\nconst config: ThemeConfig = {\\n  token: {\\n    colorPrimary: '#1890ff',\\n  },\\n};\\n\\n// 通过静态方法获取\\nconst globalToken = getDesignToken(config);\\n\\n// 通过 hook 获取\\nconst App = () => {\\n  const { token } = useToken();\\n  return null;\\n};\\n\\n// 渲染示意\\ncreateRoot(document.getElementById('#app')).render(\\n  <ConfigProvider theme={config}>\\n    <App />\\n  </ConfigProvider>,\\n);\\n\",\"paraId\":28,\"tocIndex\":9},{\"value\":\"如果需要将其应用到静态样式编译框架，如 less 可以通过 less-loader 注入：\",\"paraId\":29,\"tocIndex\":9},{\"value\":\"{\\n  loader: \\\"less-loader\\\",\\n  options: {\\n    lessOptions: {\\n      modifyVars: mapToken,\\n    },\\n  },\\n}\\n\",\"paraId\":30,\"tocIndex\":9},{\"value\":\"兼容包提供了变量转换方法用于转成 v4 的 less 变量，如需使用\",\"paraId\":31,\"tocIndex\":9},{\"value\":\"点击此处\",\"paraId\":32,\"tocIndex\":9},{\"value\":\"查看详情。\",\"paraId\":31,\"tocIndex\":9},{\"value\":\"我们提供了帮助用户调试主题的工具：\",\"paraId\":33,\"tocIndex\":10},{\"value\":\"主题编辑器\",\"paraId\":34,\"tocIndex\":10},{\"value\":\"你可以使用此工具自由地修改 Design Token，以达到你对主题的期望。\",\"paraId\":35,\"tocIndex\":10},{\"value\":\"在 Design Token 中我们提供了一套更加贴合设计的三层结构，将 Design Token 拆解为 Seed Token、Map Token 和 Alias Token 三部分。这三组 Token 并不是简单的分组，而是一个三层的派生关系，由 Seed Token 派生 Map Token，再由 Map Token 派生 Alias Token。在大部分情况下，使用 Seed Token 就可以满足定制主题的需要。但如果您需要更高程度的主题定制，您需要了解 antd 中 Design Token 的生命周期。\",\"paraId\":36,\"tocIndex\":11},{\"value\":\"Seed Token 意味着所有设计意图的起源。比如我们可以通过改变 \",\"paraId\":37,\"tocIndex\":13},{\"value\":\"colorPrimary\",\"paraId\":37,\"tocIndex\":13},{\"value\":\" 来改变主题色，antd 内部的算法会自动的根据 Seed Token 计算出对应的一系列颜色并应用：\",\"paraId\":37,\"tocIndex\":13},{\"value\":\"const theme = {\\n  token: {\\n    colorPrimary: '#1890ff',\\n  },\\n};\\n\",\"paraId\":38,\"tocIndex\":13},{\"value\":\"Map Token 是基于 Seed 派生的梯度变量。定制 Map Token 推荐通过 \",\"paraId\":39,\"tocIndex\":14},{\"value\":\"theme.algorithm\",\"paraId\":39,\"tocIndex\":14},{\"value\":\" 来实现，这样可以保证 Map Token 之间的梯度关系。也可以通过 \",\"paraId\":39,\"tocIndex\":14},{\"value\":\"theme.token\",\"paraId\":39,\"tocIndex\":14},{\"value\":\" 覆盖，用于单独修改一些 map token 的值。\",\"paraId\":39,\"tocIndex\":14},{\"value\":\"const theme = {\\n  token: {\\n    colorPrimaryBg: '#e6f7ff',\\n  },\\n};\\n\",\"paraId\":40,\"tocIndex\":14},{\"value\":\"Alias Token 用于批量控制某些共性组件的样式，基本上是 Map Token 别名，或者特殊处理过的 Map Token。\",\"paraId\":41,\"tocIndex\":15},{\"value\":\"const theme = {\\n  token: {\\n    colorLink: '#1890ff',\\n  },\\n};\\n\",\"paraId\":42,\"tocIndex\":15},{\"value\":\"基本算法用于将 Seed Token 展开为 Map Token，比如由一个基本色算出一个梯度色板，或者由一个基本的圆角算出各种大小的圆角。算法可以单独使用，也可以任意地组合使用，比如可以将暗色算法和紧凑算法组合使用，得到一个暗色和紧凑相结合的主题。\",\"paraId\":43,\"tocIndex\":16},{\"value\":\"import { theme } from 'antd';\\n\\nconst { darkAlgorithm, compactAlgorithm } = theme;\\n\\nconst theme = {\\n  algorithm: [darkAlgorithm, compactAlgorithm],\\n};\\n\",\"paraId\":44,\"tocIndex\":16},{\"value\":\"属性\",\"paraId\":45,\"tocIndex\":18},{\"value\":\"说明\",\"paraId\":45,\"tocIndex\":18},{\"value\":\"类型\",\"paraId\":45,\"tocIndex\":18},{\"value\":\"默认值\",\"paraId\":45,\"tocIndex\":18},{\"value\":\"token\",\"paraId\":45,\"tocIndex\":18},{\"value\":\"用于修改 Design Token\",\"paraId\":45,\"tocIndex\":18},{\"value\":\"AliasToken\",\"paraId\":45,\"tocIndex\":18},{\"value\":\"-\",\"paraId\":45,\"tocIndex\":18},{\"value\":\"inherit\",\"paraId\":45,\"tocIndex\":18},{\"value\":\"继承上层 ConfigProvider 中配置的主题。\",\"paraId\":45,\"tocIndex\":18},{\"value\":\"boolean\",\"paraId\":45,\"tocIndex\":18},{\"value\":\"true\",\"paraId\":45,\"tocIndex\":18},{\"value\":\"algorithm\",\"paraId\":45,\"tocIndex\":18},{\"value\":\"用于修改 Seed Token 到 Map Token 的算法\",\"paraId\":45,\"tocIndex\":18},{\"value\":\"(token: SeedToken) => MapToken\",\"paraId\":45,\"tocIndex\":18},{\"value\":\" | \",\"paraId\":45,\"tocIndex\":18},{\"value\":\"((token: SeedToken) => MapToken)[]\",\"paraId\":45,\"tocIndex\":18},{\"value\":\"defaultAlgorithm\",\"paraId\":45,\"tocIndex\":18},{\"value\":\"components\",\"paraId\":45,\"tocIndex\":18},{\"value\":\"用于修改各个组件的 Component Token 以及覆盖该组件消费的 Alias Token\",\"paraId\":45,\"tocIndex\":18},{\"value\":\"ComponentsConfig\",\"paraId\":45,\"tocIndex\":18},{\"value\":\"-\",\"paraId\":45,\"tocIndex\":18},{\"value\":\"cssVar\",\"paraId\":45,\"tocIndex\":18},{\"value\":\"开启 CSS 变量，参考\",\"paraId\":45,\"tocIndex\":18},{\"value\":\"使用 CSS 变量\",\"paraId\":46,\"tocIndex\":18},{\"value\":\"boolean | { prefix?: string; key?: string }\",\"paraId\":45,\"tocIndex\":18},{\"value\":\"false\",\"paraId\":45,\"tocIndex\":18},{\"value\":\"hashed\",\"paraId\":45,\"tocIndex\":18},{\"value\":\"组件 class Hash 值，参考\",\"paraId\":45,\"tocIndex\":18},{\"value\":\"使用 CSS 变量\",\"paraId\":47,\"tocIndex\":18},{\"value\":\"boolean\",\"paraId\":45,\"tocIndex\":18},{\"value\":\"true\",\"paraId\":45,\"tocIndex\":18},{\"value\":\"属性\",\"paraId\":48,\"tocIndex\":19},{\"value\":\"说明\",\"paraId\":48,\"tocIndex\":19},{\"value\":\"类型\",\"paraId\":48,\"tocIndex\":19},{\"value\":\"默认值\",\"paraId\":48,\"tocIndex\":19},{\"value\":\"Component\",\"paraId\":48,\"tocIndex\":19},{\"value\":\" (可以是任意 antd 组件名，如 \",\"paraId\":48,\"tocIndex\":19},{\"value\":\"Button\",\"paraId\":48,\"tocIndex\":19},{\"value\":\")\",\"paraId\":48,\"tocIndex\":19},{\"value\":\"用于修改 Component Token 以及覆盖该组件消费的 Alias Token\",\"paraId\":48,\"tocIndex\":19},{\"value\":\"ComponentToken & AliasToken & { algorithm: boolean | (token: SeedToken) => MapToken\",\"paraId\":48,\"tocIndex\":19},{\"value\":\" | \",\"paraId\":48,\"tocIndex\":19},{\"value\":\"((token: SeedToken) => MapToken)[]}\",\"paraId\":48,\"tocIndex\":19},{\"value\":\"-\",\"paraId\":48,\"tocIndex\":19},{\"value\":\"组件级别的 \",\"paraId\":49,\"tocIndex\":19},{\"value\":\"algorithm\",\"paraId\":49,\"tocIndex\":19},{\"value\":\" 默认为 \",\"paraId\":49,\"tocIndex\":19},{\"value\":\"false\",\"paraId\":49,\"tocIndex\":19},{\"value\":\"，此时组件 Token 仅仅会覆盖该组件使用的 token，不会进行派生计算。设置为 \",\"paraId\":49,\"tocIndex\":19},{\"value\":\"true\",\"paraId\":49,\"tocIndex\":19},{\"value\":\" 时会继承当前全局算法；也可以和全局的 \",\"paraId\":49,\"tocIndex\":19},{\"value\":\"algorithm\",\"paraId\":49,\"tocIndex\":19},{\"value\":\" 一样传入一个或多个算法，这将会针对该组件覆盖全局的算法。\",\"paraId\":49,\"tocIndex\":19},{\"value\":\"继承所有 SeedToken 的属性\",\"paraId\":50,\"tocIndex\":21},{\"value\":\"继承所有 SeedToken 和 MapToken 的属性\",\"paraId\":51,\"tocIndex\":22},{\"value\":\"theme\",\"paraId\":52},{\"value\":\"undefined\",\"paraId\":52},{\"value\":\"undefined\",\"paraId\":52},{\"value\":\"在 ConfigProvider 中我们通过 \",\"paraId\":53,\"tocIndex\":24},{\"value\":\"DesignTokenContext\",\"paraId\":53,\"tocIndex\":24},{\"value\":\" 传递 context，\",\"paraId\":53,\"tocIndex\":24},{\"value\":\"theme\",\"paraId\":53,\"tocIndex\":24},{\"value\":\" 为 \",\"paraId\":53,\"tocIndex\":24},{\"value\":\"undefined\",\"paraId\":53,\"tocIndex\":24},{\"value\":\" 时不会套一层 Provider，所以从无到有或者从有到无时 React 的 VirtualDOM 结构变化，导致组件重新 mount。解决方法：将 \",\"paraId\":53,\"tocIndex\":24},{\"value\":\"undefined\",\"paraId\":53,\"tocIndex\":24},{\"value\":\" 替换为空对象 \",\"paraId\":53,\"tocIndex\":24},{\"value\":\"{}\",\"paraId\":53,\"tocIndex\":24},{\"value\":\" 即可。\",\"paraId\":53,\"tocIndex\":24}];\n  "],"names":[],"mappings":"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"}