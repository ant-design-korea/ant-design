{"version":3,"sources":["components/table/demo/nest-table-border-debug.tsx?techStack=react"],"sourcesContent":["import '/home/runner/work/ant-design/ant-design/components/table/demo/nest-table-border-debug.tsx?watch=parent';import React, { useState } from 'react';\nimport { DownOutlined } from '@ant-design/icons';\nimport type { TableColumnsType, TableProps } from 'antd';\nimport { Badge, Dropdown, Form, Space, Switch, Table } from 'antd';\n\ninterface DataType {\n  key: React.Key;\n  name: string;\n  platform: string;\n  version: string;\n  upgradeNum: number;\n  creator: string;\n  createdAt: string;\n}\n\ninterface ExpandedDataType {\n  key: React.Key;\n  date: string;\n  name: string;\n  upgradeNum: string;\n}\n\nconst items = [\n  { key: '1', label: 'Action 1' },\n  { key: '2', label: 'Action 2' },\n];\n\nconst App: React.FC = () => {\n  const createExpandedRowRender = (bordered: boolean) => () => {\n    const columns: TableProps['columns'] = [\n      { title: 'Date', dataIndex: 'date', key: 'date' },\n      { title: 'Name', dataIndex: 'name', key: 'name' },\n      {\n        title: 'Status',\n        key: 'state',\n        render: () => (\n          <span>\n            <Badge status=\"success\" />\n            Finished\n          </span>\n        ),\n      },\n      { title: 'Upgrade Status', dataIndex: 'upgradeNum', key: 'upgradeNum' },\n      {\n        title: 'Action',\n        dataIndex: 'operation',\n        key: 'operation',\n        render: () => (\n          <Space size=\"middle\">\n            <a>Pause</a>\n            <a>Stop</a>\n            <Dropdown menu={{ items }}>\n              <a>\n                More <DownOutlined />\n              </a>\n            </Dropdown>\n          </Space>\n        ),\n      },\n    ];\n\n    const data: ExpandedDataType[] = [];\n    for (let i = 0; i < 3; ++i) {\n      data.push({\n        key: i,\n        date: '2014-12-24 23:12:00',\n        name: 'This is production name',\n        upgradeNum: 'Upgraded: 56',\n      });\n    }\n\n    return <Table columns={columns} dataSource={data} pagination={false} bordered={bordered} />;\n  };\n\n  const columns: TableColumnsType<DataType> = [\n    { title: 'Name', dataIndex: 'name', key: 'name' },\n    { title: 'Platform', dataIndex: 'platform', key: 'platform' },\n    { title: 'Version', dataIndex: 'version', key: 'version' },\n    { title: 'Upgraded', dataIndex: 'upgradeNum', key: 'upgradeNum' },\n    { title: 'Creator', dataIndex: 'creator', key: 'creator' },\n    { title: 'Date', dataIndex: 'createdAt', key: 'createdAt' },\n    { title: 'Action', key: 'operation', render: () => <a>Publish</a> },\n  ];\n\n  const data: DataType[] = [];\n  for (let i = 0; i < 3; ++i) {\n    data.push({\n      key: i,\n      name: 'Screem',\n      platform: 'iOS',\n      version: '10.3.4.5654',\n      upgradeNum: 500,\n      creator: 'Jack',\n      createdAt: '2014-12-24 23:12:00',\n    });\n  }\n\n  const [rootTableBordered, setRootTableBordered] = useState(true);\n  const [childTableBordered, setChildTableBordered] = useState(true);\n  return (\n    <>\n      <Form layout=\"inline\" className=\"table-demo-control-bar\" style={{ marginBottom: 16 }}>\n        <Form.Item label=\"Root Table Bordered\">\n          <Switch checked={rootTableBordered} onChange={(v) => setRootTableBordered(v)} />\n        </Form.Item>\n        <Form.Item label=\"Child Table Bordered\">\n          <Switch checked={childTableBordered} onChange={(v) => setChildTableBordered(v)} />\n        </Form.Item>\n      </Form>\n      <Table\n        title={() => 'cool'}\n        footer={() => 'cool'}\n        columns={columns}\n        expandable={{ expandedRowRender: createExpandedRowRender(childTableBordered) }}\n        dataSource={data}\n        bordered={rootTableBordered}\n      />\n    </>\n  );\n};\n\nexport default App;\n"],"names":[],"mappings":"uOAyHA,+CAAA,4BAzHO,oBAAyI,gBACnH,gBAE+B,YAmB5D,IAAM,EAAQ,CACZ,CAAE,IAAK,IAAK,MAAO,UAAW,EAC9B,CAAE,IAAK,IAAK,MAAO,UAAW,EAC/B,KAgGD,EA9FsB,KAyDpB,IAAM,EAAmB,EAAE,CAC3B,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,EAAE,EACvB,EAAK,IAAI,CAAC,CACR,IAAK,EACL,KAAM,SACN,SAAU,MACV,QAAS,cACT,WAAY,IACZ,QAAS,OACT,UAAW,qBACb,GAGF,GAAM,CAAC,EAAmB,EAAqB,CAAG,GAAA,UAAQ,EAAC,CAAA,GACrD,CAAC,EAAoB,EAAsB,CAAG,GAAA,UAAQ,EAAC,CAAA,GAC7D,MACE,iCACE,WAAC,MAAI,EAAC,OAAO,SAAS,UAAU,yBAAyB,MAAO,CAAE,aAAc,EAAG,YACjF,UAAC,MAAI,CAAC,IAAI,EAAC,MAAM,+BACf,UAAC,QAAM,EAAC,QAAS,EAAmB,SAAU,AAAC,GAAM,EAAqB,OAE5E,UAAC,MAAI,CAAC,IAAI,EAAC,MAAM,gCACf,UAAC,QAAM,EAAC,QAAS,EAAoB,SAAU,AAAC,GAAM,EAAsB,UAGhF,UAAC,OAAK,EACJ,MAAO,IAAM,OACb,OAAQ,IAAM,OACd,QAtCsC,CAC1C,CAAE,MAAO,OAAQ,UAAW,OAAQ,IAAK,MAAO,EAChD,CAAE,MAAO,WAAY,UAAW,WAAY,IAAK,UAAW,EAC5D,CAAE,MAAO,UAAW,UAAW,UAAW,IAAK,SAAU,EACzD,CAAE,MAAO,WAAY,UAAW,aAAc,IAAK,YAAa,EAChE,CAAE,MAAO,UAAW,UAAW,UAAW,IAAK,SAAU,EACzD,CAAE,MAAO,OAAQ,UAAW,YAAa,IAAK,WAAY,EAC1D,CAAE,MAAO,SAAU,IAAK,YAAa,OAAQ,IAAM,UAAC,cAAE,WAAY,EACnE,CA+BK,WAAY,CAAE,kBArFmC,KAiCrD,IAAM,EAA2B,EAAE,CACnC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,EAAE,EACvB,EAAK,IAAI,CAAC,CACR,IAAK,EACL,KAAM,sBACN,KAAM,0BACN,WAAY,cACd,GAGF,MAAO,UAAC,OAAK,EAAC,QA1CyB,CACrC,CAAE,MAAO,OAAQ,UAAW,OAAQ,IAAK,MAAO,EAChD,CAAE,MAAO,OAAQ,UAAW,OAAQ,IAAK,MAAO,EAChD,CACE,MAAO,SACP,IAAK,QACL,OAAQ,IACN,WAAC,kBACC,UAAC,OAAK,EAAC,OAAO,YAAY,aAIhC,EACA,CAAE,MAAO,iBAAkB,UAAW,aAAc,IAAK,YAAa,EACtE,CACE,MAAO,SACP,UAAW,YACX,IAAK,YACL,OAAQ,IACN,WAAC,OAAK,EAAC,KAAK,mBACV,UAAC,cAAE,UACH,UAAC,cAAE,SACH,UAAC,UAAQ,EAAC,KAAM,CAAE,MAAA,CAAM,WACtB,WAAC,eAAE,QACI,UAAC,cAAY,YAK5B,EACD,CAY+B,WAAY,EAAM,WAAY,CAAA,EAAO,SA0CR,IAzC/D,CAyCmF,EAC7E,WAAY,EACZ,SAAU,OAIlB"}