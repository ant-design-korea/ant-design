{"version":3,"sources":["components/table/demo/drag-column-sorting.tsx?techStack=react"],"sourcesContent":["import '/home/runner/work/ant-design/ant-design/components/table/demo/drag-column-sorting.tsx?watch=parent';import React, { createContext, useContext, useState } from 'react';\nimport type { DragEndEvent, DragOverEvent, UniqueIdentifier } from '@dnd-kit/core';\nimport {\n  closestCenter,\n  DndContext,\n  DragOverlay,\n  PointerSensor,\n  useSensor,\n  useSensors,\n} from '@dnd-kit/core';\nimport { restrictToHorizontalAxis } from '@dnd-kit/modifiers';\nimport {\n  arrayMove,\n  horizontalListSortingStrategy,\n  SortableContext,\n  useSortable,\n} from '@dnd-kit/sortable';\nimport { Table } from 'antd';\nimport type { TableColumnsType } from 'antd';\n\ninterface DataType {\n  key: string;\n  name: string;\n  gender: string;\n  age: number;\n  email: string;\n  address: string;\n}\n\ninterface HeaderCellProps extends React.HTMLAttributes<HTMLTableCellElement> {\n  id: string;\n}\n\ninterface BodyCellProps extends React.HTMLAttributes<HTMLTableCellElement> {\n  id: string;\n}\n\ninterface DragIndexState {\n  active: UniqueIdentifier;\n  over: UniqueIdentifier | undefined;\n  direction?: 'left' | 'right';\n}\n\nconst DragIndexContext = createContext<DragIndexState>({ active: -1, over: -1 });\n\nconst dragActiveStyle = (dragState: DragIndexState, id: string) => {\n  const { active, over, direction } = dragState;\n  // drag active style\n  let style: React.CSSProperties = {};\n  if (active && active === id) {\n    style = { backgroundColor: 'gray', opacity: 0.5 };\n  }\n  // dragover dashed style\n  else if (over && id === over && active !== over) {\n    style =\n      direction === 'right'\n        ? { borderRight: '1px dashed gray' }\n        : { borderLeft: '1px dashed gray' };\n  }\n  return style;\n};\n\nconst TableBodyCell: React.FC<BodyCellProps> = (props) => {\n  const dragState = useContext<DragIndexState>(DragIndexContext);\n  return <td {...props} style={{ ...props.style, ...dragActiveStyle(dragState, props.id) }} />;\n};\n\nconst TableHeaderCell: React.FC<HeaderCellProps> = (props) => {\n  const dragState = useContext(DragIndexContext);\n  const { attributes, listeners, setNodeRef, isDragging } = useSortable({ id: props.id });\n  const style: React.CSSProperties = {\n    ...props.style,\n    cursor: 'move',\n    ...(isDragging ? { position: 'relative', zIndex: 9999, userSelect: 'none' } : {}),\n    ...dragActiveStyle(dragState, props.id),\n  };\n  return <th {...props} ref={setNodeRef} style={style} {...attributes} {...listeners} />;\n};\n\nconst dataSource: DataType[] = [\n  {\n    key: '1',\n    name: 'John Brown',\n    gender: 'male',\n    age: 32,\n    email: 'John Brown@example.com',\n    address: 'London No. 1 Lake Park',\n  },\n  {\n    key: '2',\n    name: 'Jim Green',\n    gender: 'female',\n    age: 42,\n    email: 'jimGreen@example.com',\n    address: 'London No. 1 Lake Park',\n  },\n  {\n    key: '3',\n    name: 'Joe Black',\n    gender: 'female',\n    age: 32,\n    email: 'JoeBlack@example.com',\n    address: 'Sidney No. 1 Lake Park',\n  },\n  {\n    key: '4',\n    name: 'George Hcc',\n    gender: 'male',\n    age: 20,\n    email: 'george@example.com',\n    address: 'Sidney No. 1 Lake Park',\n  },\n];\n\nconst baseColumns: TableColumnsType<DataType> = [\n  { title: 'Name', dataIndex: 'name' },\n  { title: 'Gender', dataIndex: 'gender' },\n  { title: 'Age', dataIndex: 'age' },\n  { title: 'Email', dataIndex: 'email' },\n  { title: 'Address', dataIndex: 'address' },\n];\n\nconst App: React.FC = () => {\n  const [dragIndex, setDragIndex] = useState<DragIndexState>({ active: -1, over: -1 });\n\n  const [columns, setColumns] = useState(() =>\n    baseColumns.map((column, i) => ({\n      ...column,\n      key: `${i}`,\n      onHeaderCell: () => ({ id: `${i}` }),\n      onCell: () => ({ id: `${i}` }),\n    })),\n  );\n\n  const sensors = useSensors(\n    useSensor(PointerSensor, {\n      activationConstraint: {\n        // https://docs.dndkit.com/api-documentation/sensors/pointer#activation-constraints\n        distance: 1,\n      },\n    }),\n  );\n\n  const onDragEnd = ({ active, over }: DragEndEvent) => {\n    if (active.id !== over?.id) {\n      setColumns((prevState) => {\n        const activeIndex = prevState.findIndex((i) => i.key === active?.id);\n        const overIndex = prevState.findIndex((i) => i.key === over?.id);\n        return arrayMove(prevState, activeIndex, overIndex);\n      });\n    }\n    setDragIndex({ active: -1, over: -1 });\n  };\n\n  const onDragOver = ({ active, over }: DragOverEvent) => {\n    const activeIndex = columns.findIndex((i) => i.key === active.id);\n    const overIndex = columns.findIndex((i) => i.key === over?.id);\n    setDragIndex({\n      active: active.id,\n      over: over?.id,\n      direction: overIndex > activeIndex ? 'right' : 'left',\n    });\n  };\n\n  return (\n    <DndContext\n      sensors={sensors}\n      modifiers={[restrictToHorizontalAxis]}\n      onDragEnd={onDragEnd}\n      onDragOver={onDragOver}\n      collisionDetection={closestCenter}\n    >\n      <SortableContext items={columns.map((i) => i.key)} strategy={horizontalListSortingStrategy}>\n        <DragIndexContext.Provider value={dragIndex}>\n          <Table\n            rowKey=\"key\"\n            columns={columns}\n            dataSource={dataSource}\n            components={{\n              header: { cell: TableHeaderCell },\n              body: { cell: TableBodyCell },\n            }}\n          />\n        </DragIndexContext.Provider>\n      </SortableContext>\n      <DragOverlay>\n        <th style={{ backgroundColor: 'gray', padding: 16 }}>\n          {columns[columns.findIndex((i) => i.key === dragIndex.active)]?.title as React.ReactNode}\n        </th>\n      </DragOverlay>\n    </DndContext>\n  );\n};\n\nexport default App;\n"],"names":[],"mappings":"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"}