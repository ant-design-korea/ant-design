{"version":3,"sources":["components/table/demo/edit-cell.tsx?techStack=react"],"sourcesContent":["import '/home/runner/work/ant-design/ant-design/components/table/demo/edit-cell.tsx?watch=parent';import React, { useContext, useEffect, useRef, useState } from 'react';\nimport type { GetRef, InputRef, TableProps } from 'antd';\nimport { Button, Form, Input, Popconfirm, Table } from 'antd';\n\ntype FormInstance<T> = GetRef<typeof Form<T>>;\n\nconst EditableContext = React.createContext<FormInstance<any> | null>(null);\n\ninterface Item {\n  key: string;\n  name: string;\n  age: string;\n  address: string;\n}\n\ninterface EditableRowProps {\n  index: number;\n}\n\nconst EditableRow: React.FC<EditableRowProps> = ({ index, ...props }) => {\n  const [form] = Form.useForm();\n  return (\n    <Form form={form} component={false}>\n      <EditableContext.Provider value={form}>\n        <tr {...props} />\n      </EditableContext.Provider>\n    </Form>\n  );\n};\n\ninterface EditableCellProps {\n  title: React.ReactNode;\n  editable: boolean;\n  dataIndex: keyof Item;\n  record: Item;\n  handleSave: (record: Item) => void;\n}\n\nconst EditableCell: React.FC<React.PropsWithChildren<EditableCellProps>> = ({\n  title,\n  editable,\n  children,\n  dataIndex,\n  record,\n  handleSave,\n  ...restProps\n}) => {\n  const [editing, setEditing] = useState(false);\n  const inputRef = useRef<InputRef>(null);\n  const form = useContext(EditableContext)!;\n\n  useEffect(() => {\n    if (editing) {\n      inputRef.current?.focus();\n    }\n  }, [editing]);\n\n  const toggleEdit = () => {\n    setEditing(!editing);\n    form.setFieldsValue({ [dataIndex]: record[dataIndex] });\n  };\n\n  const save = async () => {\n    try {\n      const values = await form.validateFields();\n\n      toggleEdit();\n      handleSave({ ...record, ...values });\n    } catch (errInfo) {\n      console.log('Save failed:', errInfo);\n    }\n  };\n\n  let childNode = children;\n\n  if (editable) {\n    childNode = editing ? (\n      <Form.Item\n        style={{ margin: 0 }}\n        name={dataIndex}\n        rules={[{ required: true, message: `${title} is required.` }]}\n      >\n        <Input ref={inputRef} onPressEnter={save} onBlur={save} />\n      </Form.Item>\n    ) : (\n      <div\n        className=\"editable-cell-value-wrap\"\n        style={{ paddingInlineEnd: 24 }}\n        onClick={toggleEdit}\n      >\n        {children}\n      </div>\n    );\n  }\n\n  return <td {...restProps}>{childNode}</td>;\n};\n\ninterface DataType {\n  key: React.Key;\n  name: string;\n  age: string;\n  address: string;\n}\n\ntype ColumnTypes = Exclude<TableProps['columns'], undefined>;\n\nconst App: React.FC = () => {\n  const [dataSource, setDataSource] = useState<DataType[]>([\n    {\n      key: '0',\n      name: 'Edward King 0',\n      age: '32',\n      address: 'London, Park Lane no. 0',\n    },\n    {\n      key: '1',\n      name: 'Edward King 1',\n      age: '32',\n      address: 'London, Park Lane no. 1',\n    },\n  ]);\n\n  const [count, setCount] = useState(2);\n\n  const handleDelete = (key: React.Key) => {\n    const newData = dataSource.filter((item) => item.key !== key);\n    setDataSource(newData);\n  };\n\n  const defaultColumns: (ColumnTypes[number] & { editable?: boolean; dataIndex: string })[] = [\n    {\n      title: 'name',\n      dataIndex: 'name',\n      width: '30%',\n      editable: true,\n    },\n    {\n      title: 'age',\n      dataIndex: 'age',\n    },\n    {\n      title: 'address',\n      dataIndex: 'address',\n    },\n    {\n      title: 'operation',\n      dataIndex: 'operation',\n      render: (_, record) =>\n        dataSource.length >= 1 ? (\n          <Popconfirm title=\"Sure to delete?\" onConfirm={() => handleDelete(record.key)}>\n            <a>Delete</a>\n          </Popconfirm>\n        ) : null,\n    },\n  ];\n\n  const handleAdd = () => {\n    const newData: DataType = {\n      key: count,\n      name: `Edward King ${count}`,\n      age: '32',\n      address: `London, Park Lane no. ${count}`,\n    };\n    setDataSource([...dataSource, newData]);\n    setCount(count + 1);\n  };\n\n  const handleSave = (row: DataType) => {\n    const newData = [...dataSource];\n    const index = newData.findIndex((item) => row.key === item.key);\n    const item = newData[index];\n    newData.splice(index, 1, {\n      ...item,\n      ...row,\n    });\n    setDataSource(newData);\n  };\n\n  const components = {\n    body: {\n      row: EditableRow,\n      cell: EditableCell,\n    },\n  };\n\n  const columns = defaultColumns.map((col) => {\n    if (!col.editable) {\n      return col;\n    }\n    return {\n      ...col,\n      onCell: (record: DataType) => ({\n        record,\n        editable: col.editable,\n        dataIndex: col.dataIndex,\n        title: col.title,\n        handleSave,\n      }),\n    };\n  });\n\n  return (\n    <div>\n      <Button onClick={handleAdd} type=\"primary\" style={{ marginBottom: 16 }}>\n        Add a row\n      </Button>\n      <Table\n        components={components}\n        rowClassName={() => 'editable-row'}\n        bordered\n        dataSource={dataSource}\n        columns={columns as ColumnTypes}\n      />\n    </div>\n  );\n};\n\nexport default App;\n"],"names":[],"mappings":"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"}