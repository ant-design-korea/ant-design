{"version":3,"sources":["components/calendar/demo/notice-calendar.tsx?techStack=react"],"sourcesContent":["import '/home/runner/work/ant-design/ant-design/components/calendar/demo/notice-calendar.tsx?watch=parent';import React from 'react';\nimport type { BadgeProps, CalendarProps } from 'antd';\nimport { Badge, Calendar } from 'antd';\nimport type { Dayjs } from 'dayjs';\n\nconst getListData = (value: Dayjs) => {\n  let listData: { type: string; content: string }[] = []; // Specify the type of listData\n  switch (value.date()) {\n    case 8:\n      listData = [\n        { type: 'warning', content: 'This is warning event.' },\n        { type: 'success', content: 'This is usual event.' },\n      ];\n      break;\n    case 10:\n      listData = [\n        { type: 'warning', content: 'This is warning event.' },\n        { type: 'success', content: 'This is usual event.' },\n        { type: 'error', content: 'This is error event.' },\n      ];\n      break;\n    case 15:\n      listData = [\n        { type: 'warning', content: 'This is warning event' },\n        { type: 'success', content: 'This is very long usual event......' },\n        { type: 'error', content: 'This is error event 1.' },\n        { type: 'error', content: 'This is error event 2.' },\n        { type: 'error', content: 'This is error event 3.' },\n        { type: 'error', content: 'This is error event 4.' },\n      ];\n      break;\n    default:\n  }\n  return listData || [];\n};\n\nconst getMonthData = (value: Dayjs) => {\n  if (value.month() === 8) {\n    return 1394;\n  }\n};\n\nconst App: React.FC = () => {\n  const monthCellRender = (value: Dayjs) => {\n    const num = getMonthData(value);\n    return num ? (\n      <div className=\"notes-month\">\n        <section>{num}</section>\n        <span>Backlog number</span>\n      </div>\n    ) : null;\n  };\n\n  const dateCellRender = (value: Dayjs) => {\n    const listData = getListData(value);\n    return (\n      <ul className=\"events\">\n        {listData.map((item) => (\n          <li key={item.content}>\n            <Badge status={item.type as BadgeProps['status']} text={item.content} />\n          </li>\n        ))}\n      </ul>\n    );\n  };\n\n  const cellRender: CalendarProps<Dayjs>['cellRender'] = (current, info) => {\n    if (info.type === 'date') return dateCellRender(current);\n    if (info.type === 'month') return monthCellRender(current);\n    return info.originNode;\n  };\n\n  return <Calendar cellRender={cellRender} />;\n};\n\nexport default App;\n"],"names":[],"mappings":"uOA2EA,+CAAA,4BA3EO,oBAEyB,YAGhC,IAAM,EAAc,AAAC,IACnB,IAAI,EAAgD,EAAE,CACtD,OAAQ,EAAM,IAAI,IAChB,KAAK,EACH,EAAW,CACT,CAAE,KAAM,UAAW,QAAS,wBAAyB,EACrD,CAAE,KAAM,UAAW,QAAS,sBAAuB,EACpD,CACD,MACF,KAAK,GACH,EAAW,CACT,CAAE,KAAM,UAAW,QAAS,wBAAyB,EACrD,CAAE,KAAM,UAAW,QAAS,sBAAuB,EACnD,CAAE,KAAM,QAAS,QAAS,sBAAuB,EAClD,CACD,MACF,KAAK,GACH,EAAW,CACT,CAAE,KAAM,UAAW,QAAS,uBAAwB,EACpD,CAAE,KAAM,UAAW,QAAS,qCAAsC,EAClE,CAAE,KAAM,QAAS,QAAS,wBAAyB,EACnD,CAAE,KAAM,QAAS,QAAS,wBAAyB,EACnD,CAAE,KAAM,QAAS,QAAS,wBAAyB,EACnD,CAAE,KAAM,QAAS,QAAS,wBAAyB,EACpD,CAGL,CACA,OAAO,GAAY,EAAE,CACvB,EAEM,EAAe,AAAC,IACpB,GAAI,AAAkB,IAAlB,EAAM,KAAK,GACb,OAAO,KAEX,MAmCA,EAjCsB,KACpB,IAAM,EAAkB,AAAC,IACvB,IAAM,EAAM,EAAa,GACzB,OAAO,EACL,WAAC,OAAI,UAAU,wBACb,UAAC,oBAAS,IACV,UAAC,iBAAK,sBAEN,KACN,EAEM,EAAiB,AAAC,IACtB,IAAM,EAAW,EAAY,GAC7B,MACE,UAAC,MAAG,UAAU,kBACX,EAAS,GAAG,CAAC,AAAC,GACb,UAAC,eACC,UAAC,OAAK,EAAC,OAAQ,EAAK,IAAI,CAA0B,KAAM,EAAK,OAAO,IAD7D,EAAK,OAAO,KAM7B,EAQA,MAAO,UAAC,UAAQ,EAAC,WANsC,CAAC,EAAS,IAC/D,AAAI,AAAc,SAAd,EAAK,IAAI,CAAoB,EAAe,GAC5C,AAAc,UAAd,EAAK,IAAI,CAAqB,EAAgB,GAC3C,EAAK,UAAU,GAI1B"}