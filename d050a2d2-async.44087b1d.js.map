{"version":3,"sources":["docs/react/server-side-rendering.zh-CN.md?type=text"],"sourcesContent":["\n  import '/home/runner/work/ant-design/ant-design/docs/react/server-side-rendering.zh-CN.md?watch=parent';\n  export const texts = [{\"value\":\"服务端渲染样式有两种方案，它们各有优缺点：\",\"paraId\":0},{\"value\":\"内联样式\",\"paraId\":1},{\"value\":\"：在渲染时无需额外请求样式文件，好处是减少额外的网络请求，缺点则是会使得 HTML 体积增大，影响首屏渲染速度，相关讨论参考：\",\"paraId\":1},{\"value\":\"#39891\",\"paraId\":1},{\"value\":\"整体导出\",\"paraId\":1},{\"value\":\"：提前烘焙 antd 组件样式为 css 文件，在页面中时引入。好处是打开任意页面时如传统 css 方案一样都会复用同一套 css 文件以命中缓存，缺点是如果页面中存在多主题，则需要额外进行烘焙\",\"paraId\":1},{\"value\":\"使用 \",\"paraId\":2,\"tocIndex\":0},{\"value\":\"@ant-design/cssinjs\",\"paraId\":2,\"tocIndex\":0},{\"value\":\" 将所需样式抽离：\",\"paraId\":2,\"tocIndex\":0},{\"value\":\"import React from 'react';\\nimport { createCache, extractStyle, StyleProvider } from '@ant-design/cssinjs';\\nimport type Entity from '@ant-design/cssinjs/es/Cache';\\nimport { renderToString } from 'react-dom/server';\\n\\nconst App = () => {\\n  // SSR Render\\n  const cache = React.useMemo<Entity>(() => createCache(), []);\\n  const html = renderToString(\\n    <StyleProvider cache={cache}>\\n      <MyApp />\\n    </StyleProvider>,\\n  );\\n\\n  // Grab style from cache\\n  const styleText = extractStyle(cache);\\n\\n  // Mix with style\\n  return `\\n    <!DOCTYPE html>\\n    <html>\\n      <head>\\n        ${styleText}\\n      </head>\\n      <body>\\n        <div id=\\\"root\\\">${html}</div>\\n      </body>\\n    </html>\\n  `;\\n};\\n\\nexport default App;\\n\",\"paraId\":3,\"tocIndex\":0},{\"value\":\"如果你想要将样式文件抽离到 css 文件中，可以尝试使用以下方案：\",\"paraId\":4,\"tocIndex\":1},{\"value\":\"安装依赖\",\"paraId\":5,\"tocIndex\":1},{\"value\":\"npm install ts-node tslib cross-env --save-dev\\n\",\"paraId\":6,\"tocIndex\":1},{\"value\":\"新增 \",\"paraId\":7,\"tocIndex\":1},{\"value\":\"tsconfig.node.json\",\"paraId\":7,\"tocIndex\":1},{\"value\":\" 文件\",\"paraId\":7,\"tocIndex\":1},{\"value\":\"{\\n  \\\"compilerOptions\\\": {\\n    \\\"strictNullChecks\\\": true,\\n    \\\"module\\\": \\\"NodeNext\\\",\\n    \\\"jsx\\\": \\\"react\\\",\\n    \\\"esModuleInterop\\\": true\\n  },\\n  \\\"include\\\": [\\\"next-env.d.ts\\\", \\\"**/*.ts\\\", \\\"**/*.tsx\\\"]\\n}\\n\",\"paraId\":8,\"tocIndex\":1},{\"value\":\"新增 \",\"paraId\":9,\"tocIndex\":1},{\"value\":\"scripts/genAntdCss.tsx\",\"paraId\":9,\"tocIndex\":1},{\"value\":\" 文件\",\"paraId\":9,\"tocIndex\":1},{\"value\":\"// scripts/genAntdCss.tsx\\nimport fs from 'fs';\\nimport { extractStyle } from '@ant-design/static-style-extract';\\n\\nconst outputPath = './public/antd.min.css';\\n\\nconst css = extractStyle();\\n\\nfs.writeFileSync(outputPath, css);\\n\",\"paraId\":10,\"tocIndex\":1},{\"value\":\"若你想使用混合主题或自定义主题，可采用以下脚本：\",\"paraId\":11,\"tocIndex\":1},{\"value\":\"import fs from 'fs';\\nimport React from 'react';\\nimport { extractStyle } from '@ant-design/static-style-extract';\\nimport { ConfigProvider } from 'antd';\\n\\nconst outputPath = './public/antd.min.css';\\n\\nconst testGreenColor = '#008000';\\nconst testRedColor = '#ff0000';\\n\\nconst css = extractStyle((node) => (\\n  <>\\n    <ConfigProvider\\n      theme={{\\n        token: {\\n          colorBgBase: testGreenColor,\\n        },\\n      }}\\n    >\\n      {node}\\n    </ConfigProvider>\\n    <ConfigProvider\\n      theme={{\\n        token: {\\n          colorPrimary: testGreenColor,\\n        },\\n      }}\\n    >\\n      <ConfigProvider\\n        theme={{\\n          token: {\\n            colorBgBase: testRedColor,\\n          },\\n        }}\\n      >\\n        {node}\\n      </ConfigProvider>\\n    </ConfigProvider>\\n  </>\\n));\\n\\nfs.writeFileSync(outputPath, css);\\n\",\"paraId\":12,\"tocIndex\":1},{\"value\":\"你可以选择在启动开发命令或编译前执行这个脚本，运行上述脚本将会在当前项目的指定（如： public 目录）目录下直接生成一个全量的 antd.min.css 文件。\",\"paraId\":13,\"tocIndex\":1},{\"value\":\"以 Next.js 为例（\",\"paraId\":14,\"tocIndex\":1},{\"value\":\"参考示例\",\"paraId\":14,\"tocIndex\":1},{\"value\":\"）：\",\"paraId\":14,\"tocIndex\":1},{\"value\":\"// package.json\\n{\\n  \\\"scripts\\\": {\\n    \\\"dev\\\": \\\"next dev\\\",\\n    \\\"build\\\": \\\"next build\\\",\\n    \\\"start\\\": \\\"next start\\\",\\n    \\\"lint\\\": \\\"next lint\\\",\\n    \\\"predev\\\": \\\"ts-node --project ./tsconfig.node.json ./scripts/genAntdCss.tsx\\\",\\n    \\\"prebuild\\\": \\\"cross-env NODE_ENV=production ts-node --project ./tsconfig.node.json ./scripts/genAntdCss.tsx\\\"\\n  }\\n}\\n\",\"paraId\":15,\"tocIndex\":1},{\"value\":\"然后，你只需要在\",\"paraId\":16,\"tocIndex\":1},{\"value\":\"pages/_app.tsx\",\"paraId\":16,\"tocIndex\":1},{\"value\":\"文件中引入这个文件即可：\",\"paraId\":16,\"tocIndex\":1},{\"value\":\"import { StyleProvider } from '@ant-design/cssinjs';\\nimport type { AppProps } from 'next/app';\\n\\nimport '../public/antd.min.css'; // 添加这行\\nimport '../styles/globals.css';\\n\\nexport default function App({ Component, pageProps }: AppProps) {\\n  return (\\n    <StyleProvider hashPriority=\\\"high\\\">\\n      <Component {...pageProps} />\\n    </StyleProvider>\\n  );\\n}\\n\",\"paraId\":17,\"tocIndex\":1},{\"value\":\"如果你的项目中使用了自定义主题，可以尝试通过以下方式进行烘焙：\",\"paraId\":18,\"tocIndex\":2},{\"value\":\"import { extractStyle } from '@ant-design/static-style-extract';\\nimport { ConfigProvider } from 'antd';\\n\\nconst cssText = extractStyle((node) => (\\n  <ConfigProvider\\n    theme={{\\n      token: {\\n        colorPrimary: 'red',\\n      },\\n    }}\\n  >\\n    {node}\\n  </ConfigProvider>\\n));\\n\",\"paraId\":19,\"tocIndex\":2},{\"value\":\"如果你的项目中使用了混合主题，可以尝试通过以下方式进行烘焙：\",\"paraId\":20,\"tocIndex\":3},{\"value\":\"import { extractStyle } from '@ant-design/static-style-extract';\\nimport { ConfigProvider } from 'antd';\\n\\nconst cssText = extractStyle((node) => (\\n  <>\\n    <ConfigProvider\\n      theme={{\\n        token: {\\n          colorBgBase: 'green ',\\n        },\\n      }}\\n    >\\n      {node}\\n    </ConfigProvider>\\n    <ConfigProvider\\n      theme={{\\n        token: {\\n          colorPrimary: 'blue',\\n        },\\n      }}\\n    >\\n      <ConfigProvider\\n        theme={{\\n          token: {\\n            colorBgBase: 'red ',\\n          },\\n        }}\\n      >\\n        {node}\\n      </ConfigProvider>\\n    </ConfigProvider>\\n  </>\\n));\\n\",\"paraId\":21,\"tocIndex\":3},{\"value\":\"更多\",\"paraId\":22,\"tocIndex\":3},{\"value\":\"static-style-extract\",\"paraId\":22,\"tocIndex\":3},{\"value\":\"的实现细节请看：\",\"paraId\":22,\"tocIndex\":3},{\"value\":\"static-style-extract\",\"paraId\":22,\"tocIndex\":3},{\"value\":\"。\",\"paraId\":22,\"tocIndex\":3},{\"value\":\"// scripts/genAntdCss.tsx\\nimport { createHash } from 'crypto';\\nimport fs from 'fs';\\nimport path from 'path';\\nimport { extractStyle } from '@ant-design/cssinjs';\\nimport type Entity from '@ant-design/cssinjs/lib/Cache';\\n\\nexport type DoExtraStyleOptions = {\\n  cache: Entity;\\n  dir?: string;\\n  baseFileName?: string;\\n};\\nexport function doExtraStyle({\\n  cache,\\n  dir = 'antd-output',\\n  baseFileName = 'antd.min',\\n}: DoExtraStyleOptions) {\\n  const baseDir = path.resolve(__dirname, '../../static/css');\\n\\n  const outputCssPath = path.join(baseDir, dir);\\n\\n  if (!fs.existsSync(outputCssPath)) {\\n    fs.mkdirSync(outputCssPath, { recursive: true });\\n  }\\n\\n  const css = extractStyle(cache, true);\\n  if (!css) return '';\\n\\n  const md5 = createHash('md5');\\n  const hash = md5.update(css).digest('hex');\\n  const fileName = `${baseFileName}.${hash.substring(0, 8)}.css`;\\n  const fullpath = path.join(outputCssPath, fileName);\\n\\n  const res = `_next/static/css/${dir}/${fileName}`;\\n\\n  if (fs.existsSync(fullpath)) return res;\\n\\n  fs.writeFileSync(fullpath, css);\\n\\n  return res;\\n}\\n\",\"paraId\":23,\"tocIndex\":4},{\"value\":\"在 \",\"paraId\":24,\"tocIndex\":4},{\"value\":\"_document.tsx\",\"paraId\":24,\"tocIndex\":4},{\"value\":\" 中使用上述工具进行按需导出：\",\"paraId\":24,\"tocIndex\":4},{\"value\":\"// _document.tsx\\nimport { createCache, StyleProvider } from '@ant-design/cssinjs';\\nimport type { DocumentContext } from 'next/document';\\nimport Document, { Head, Html, Main, NextScript } from 'next/document';\\n\\nimport { doExtraStyle } from '../scripts/genAntdCss';\\n\\nexport default class MyDocument extends Document {\\n  static async getInitialProps(ctx: DocumentContext) {\\n    const cache = createCache();\\n    let fileName = '';\\n    const originalRenderPage = ctx.renderPage;\\n    ctx.renderPage = () =>\\n      originalRenderPage({\\n        enhanceApp: (App) => (props) => (\\n          <StyleProvider cache={cache}>\\n            <App {...props} />\\n          </StyleProvider>\\n        ),\\n      });\\n\\n    const initialProps = await Document.getInitialProps(ctx);\\n    // 1.1 extract style which had been used\\n    fileName = doExtraStyle({\\n      cache,\\n    });\\n    return {\\n      ...initialProps,\\n      styles: (\\n        <>\\n          {initialProps.styles}\\n          {/* 1.2 inject css */}\\n          {fileName && <link rel=\\\"stylesheet\\\" href={`/${fileName}`} />}\\n        </>\\n      ),\\n    };\\n  }\\n\\n  render() {\\n    return (\\n      <Html lang=\\\"en\\\">\\n        <Head />\\n        <body>\\n          <Main />\\n          <NextScript />\\n        </body>\\n      </Html>\\n    );\\n  }\\n}\\n\",\"paraId\":25,\"tocIndex\":4},{\"value\":\"演示示例请看：\",\"paraId\":26,\"tocIndex\":4},{\"value\":\"按需抽取样式示例\",\"paraId\":26,\"tocIndex\":4}];\n  "],"names":[],"mappings":"qOAEe,6CAAA,QADN,YACA,IAAM,EAAQ,CAAC,CAAC,MAAQ,iIAAwB,OAAS,CAAC,EAAE,CAAC,MAAQ,2BAAO,OAAS,CAAC,EAAE,CAAC,MAAQ,+VAAkE,OAAS,CAAC,EAAE,CAAC,MAAQ,SAAS,OAAS,CAAC,EAAE,CAAC,MAAQ,2BAAO,OAAS,CAAC,EAAE,CAAC,MAAQ,geAAoG,OAAS,CAAC,EAAE,CAAC,MAAQ,gBAAM,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,sBAAsB,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,oDAAY,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,yuBAAyuB,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,gLAAoC,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,2BAAO,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,mDAAmD,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,gBAAM,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,qBAAqB,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,gBAAM,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,0MAAgO,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,gBAAM,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,yBAAyB,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,gBAAM,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,0OAA0O,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,mJAA2B,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,01BAA01B,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,iYAAqF,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,oCAAgB,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,2BAAO,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,eAAK,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,4VAAsX,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,mDAAW,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,iBAAiB,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,2EAAe,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,oYAAgX,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,6LAAkC,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,qSAAqS,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,uLAAiC,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,6nBAA6nB,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,eAAK,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,uBAAuB,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,mDAAW,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,uBAAuB,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,SAAI,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,klCAAklC,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,UAAK,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,gBAAgB,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,wFAAkB,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,0xCAA0xC,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,6CAAU,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,mDAAW,OAAS,GAAG,SAAW,CAAC,EAAE"}