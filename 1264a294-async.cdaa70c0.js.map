{"version":3,"sources":["docs/blog/hydrate-cssinjs.zh-CN.md?type=text"],"sourcesContent":["\n  import '/home/runner/work/ant-design/ant-design/docs/blog/hydrate-cssinjs.zh-CN.md?watch=parent';\n  export const texts = [{\"value\":\"众所周知，antd v5 使用了 CSS-in-JS 技术从而支持混合、动态样式的需求。相对的它需要在运行时生成样式，这会造成一定的性能损耗。因此我们研发了组件库级别的 \",\"paraId\":0},{\"value\":\"@ant-design/cssinjs\",\"paraId\":0},{\"value\":\" 库，通过一定的约束提升缓存效率，从而达到性能优化的目的。不过我们并不止步于此。我们可以通过一些逻辑，直接跳过运行时生成样式的阶段。\",\"paraId\":0},{\"value\":\"如果你研究过 Ant Design 的官网，你会发现 Ant Design 的组件并没有动态插入 \",\"paraId\":1,\"tocIndex\":0},{\"value\":\"<style />\",\"paraId\":1,\"tocIndex\":0},{\"value\":\" 来控制样式，而是通过 CSS 文件来控制样式：\",\"paraId\":1,\"tocIndex\":0},{\"value\":\"document.head\",\"paraId\":2,\"tocIndex\":0},{\"value\":\" 里有几个 \",\"paraId\":2,\"tocIndex\":0},{\"value\":\"css\",\"paraId\":2,\"tocIndex\":0},{\"value\":\" 文件引用：\",\"paraId\":2,\"tocIndex\":0},{\"value\":\"umi.[hash].css\",\"paraId\":3,\"tocIndex\":0},{\"value\":\"style-acss.[hash].css\",\"paraId\":3,\"tocIndex\":0},{\"value\":\"前者为 dumi 生成的样式内容，例如 Demo 块、搜索框样式等等。而后者则是 SSR 生成的样式文件。在\",\"paraId\":4,\"tocIndex\":0},{\"value\":\"定制主题\",\"paraId\":5,\"tocIndex\":0},{\"value\":\"文档中，我们提过可以通过整体导出的方式将页面中用到的组件进行预先烘焙，从而生成 css 文件以供缓存命中从而提升下一次打开速度。这也是我们在官网中使用的方式。所以 Demo 中的组件，其实就是复用了这部分样式。\",\"paraId\":4,\"tocIndex\":0},{\"value\":\"等等！CSS-in-JS 不是需要在运行时生成样式的 hash 然后通过 \",\"paraId\":6,\"tocIndex\":0},{\"value\":\"<style />\",\"paraId\":6,\"tocIndex\":0},{\"value\":\" 进行对齐的么？为什么 css 文件也可以对齐？不用着急，我们慢慢看。\",\"paraId\":6,\"tocIndex\":0},{\"value\":\"应用级的 CSS-in-JS 方案会对生成的样式计算出 hash 值，并且将其存入 Cache 中。当下次渲染时，会先从 Cache 中查找是否存在对应的样式，如果存在则直接使用，否则再生成一次。这样就可以避免重复生成样式，从而提升性能。\",\"paraId\":7,\"tocIndex\":1},{\"value\":\"每个动态插入到页面中的样式同样以 hash 作为唯一标识符。如果页面中已经存在该 hash 的 \",\"paraId\":8,\"tocIndex\":1},{\"value\":\"<style />\",\"paraId\":8,\"tocIndex\":1},{\"value\":\"，则说明 SSR 中做过 inline style 注入。那么 \",\"paraId\":8,\"tocIndex\":1},{\"value\":\"<style />\",\"paraId\":8,\"tocIndex\":1},{\"value\":\" 就不用再次创建。\",\"paraId\":8,\"tocIndex\":1},{\"value\":\"你可以发现，虽然 \",\"paraId\":9,\"tocIndex\":1},{\"value\":\"<style />\",\"paraId\":9,\"tocIndex\":1},{\"value\":\" 的节点创建可以省略，但是因为 hash 依赖于计算出的样式内容。所以即便页面中已经有可以复用的样式内容，它仍然免不了需要计算一次。实属不划算。\",\"paraId\":9,\"tocIndex\":1},{\"value\":\"在 \",\"paraId\":10,\"tocIndex\":2},{\"value\":\"组件级别的 CSS-in-JS\",\"paraId\":11,\"tocIndex\":2},{\"value\":\" 一文中，我们提过。Ant Design 的 Cache 机制并不需要计算出完整的样式。对于组件库而言，只要通过 Token 和 ComponentName 就可以确定生成样式一致性，所以我们可以提前计算出 hash 值：\",\"paraId\":10,\"tocIndex\":2},{\"value\":\"也因此，我们发现可以复用这套机制，实现在客户端侧感知组件样式是否已经注入过。\",\"paraId\":12,\"tocIndex\":2},{\"value\":\"在 \",\"paraId\":13,\"tocIndex\":3},{\"value\":\"@ant-design/cssinjs\",\"paraId\":13,\"tocIndex\":3},{\"value\":\" 中，Cache 本身包含了每个元素对应的 style 和 hash 信息。过去的 \",\"paraId\":13,\"tocIndex\":3},{\"value\":\"extractStyle\",\"paraId\":13,\"tocIndex\":3},{\"value\":\" 方法只取 Cache 中 style 的内容进行封装：\",\"paraId\":13,\"tocIndex\":3},{\"value\":\"// e.g. Real world path is much more complex\\n{\\n  \\\"bAMbOo|Button\\\": [\\\"LItTlE\\\", \\\":where(.bAMbOo).ant-btn { color: red }\\\"],\\n  \\\"bAMbOo|Spin\\\": [\\\"liGHt\\\", \\\":where(.bAMbOo).ant-spin { color: blue }\\\"]\\n}\\n\",\"paraId\":14,\"tocIndex\":3},{\"value\":\"提取：\",\"paraId\":15,\"tocIndex\":3},{\"value\":\":where(.bAMbOo).ant-btn {\\n  color: red;\\n}\\n:where(.bAMbOo).ant-spin {\\n  color: blue;\\n}\\n\",\"paraId\":16,\"tocIndex\":3},{\"value\":\"为了复用样式，我们更进一步。将 path 和 hash 值也进行了抽取：\",\"paraId\":17,\"tocIndex\":3},{\"value\":\"{\\n  \\\"bAMbOo|Button\\\": \\\"LItTlE\\\",\\n  \\\"bAMbOo|Spin\\\": \\\"liGHt\\\"\\n}\\n\",\"paraId\":18,\"tocIndex\":3},{\"value\":\"并且也打成 css 样式：\",\"paraId\":19,\"tocIndex\":3},{\"value\":\"// Just example. Not real world code\\n.cssinjs-cache-path {\\n  content: 'bAMbOo|Button:LItTlE;bAMbOo|Spin:liGHt';\\n}\\n\",\"paraId\":20,\"tocIndex\":3},{\"value\":\"这样 SSR 侧就将我们所需的信息全部留存了下来，接下去只需要在客户端进行提取即可。\",\"paraId\":21,\"tocIndex\":3},{\"value\":\"在客户端则简单的多，我们通过 \",\"paraId\":22,\"tocIndex\":4},{\"value\":\"getComputedStyle\",\"paraId\":22,\"tocIndex\":4},{\"value\":\" 提取 HashMap 信息留存即可：\",\"paraId\":22,\"tocIndex\":4},{\"value\":\"// Just example. Not real world code\\nconst measure = document.createElement('div');\\nmeasure.className = 'cssinjs-cache-path';\\ndocument.body.appendChild(measure);\\n\\n// Now let's parse the `content`\\nconst { content } = getComputedStyle(measure);\\n\",\"paraId\":23,\"tocIndex\":4},{\"value\":\"在组件渲染阶段，\",\"paraId\":24,\"tocIndex\":4},{\"value\":\"useStyleRegister\",\"paraId\":24,\"tocIndex\":4},{\"value\":\" 在计算 CSS Object 之前，会先在 HashMap 中查找 path 是否存在。如果存在，则说明该数据已经通过服务端生成。我们只需要将样式从现有的 \",\"paraId\":24,\"tocIndex\":4},{\"value\":\"<style />\",\"paraId\":24,\"tocIndex\":4},{\"value\":\" 里提取出来即可：\",\"paraId\":24,\"tocIndex\":4},{\"value\":\"// e.g. Real world path is much more complex\\n{\\n  \\\"bAMbOo|Button\\\": [\\\"LItTlE\\\", \\\"READ_FROM_INLINE_STYLE\\\"],\\n  \\\"bAMbOo|Spin\\\": [\\\"liGHt\\\", \\\"READ_FROM_INLINE_STYLE\\\"]\\n}\\n\",\"paraId\":25,\"tocIndex\":4},{\"value\":\"而对于 CSS 文件提供的样式（比如官网的使用方式），它不像 \",\"paraId\":26,\"tocIndex\":4},{\"value\":\"<style />\",\"paraId\":26,\"tocIndex\":4},{\"value\":\" 会被移除，我们直接标记为来自于 CSS 文件即可。和 inline style 一样，它们会在 \",\"paraId\":26,\"tocIndex\":4},{\"value\":\"useInsertionEffect\",\"paraId\":26,\"tocIndex\":4},{\"value\":\" 阶段被跳过。\",\"paraId\":26,\"tocIndex\":4},{\"value\":\"// e.g. Real world path is much more complex\\n{\\n  \\\"bAMbOo|Button\\\": [\\\"LItTlE\\\", \\\"__FROM_CSS_FILE__\\\"],\\n  \\\"bAMbOo|Spin\\\": [\\\"liGHt\\\", \\\"__FROM_CSS_FILE__\\\"]\\n}\\n\",\"paraId\":27,\"tocIndex\":4},{\"value\":\"CSS-in-JS 因为运行时的性能损耗而被人诟病。而在 Ant Design 中，如果你的应用使用了 SSR，那么在客户端侧就可以直接跳过运行时生成样式的阶段从而提升性能。当然，我们会继续跟进 CSS-in-JS 的发展，为你带来更好的体验。\",\"paraId\":28,\"tocIndex\":5}];\n  "],"names":[],"mappings":"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"}