{"version":3,"sources":["components/select/demo/select-users.tsx?techStack=react"],"sourcesContent":["import '/home/runner/work/ant-design/ant-design/components/select/demo/select-users.tsx?watch=parent';import React, { useMemo, useRef, useState } from 'react';\nimport { Select, Spin } from 'antd';\nimport type { SelectProps } from 'antd';\nimport debounce from 'lodash/debounce';\n\nexport interface DebounceSelectProps<ValueType = any>\n  extends Omit<SelectProps<ValueType | ValueType[]>, 'options' | 'children'> {\n  fetchOptions: (search: string) => Promise<ValueType[]>;\n  debounceTimeout?: number;\n}\n\nfunction DebounceSelect<\n  ValueType extends { key?: string; label: React.ReactNode; value: string | number } = any,\n>({ fetchOptions, debounceTimeout = 800, ...props }: DebounceSelectProps<ValueType>) {\n  const [fetching, setFetching] = useState(false);\n  const [options, setOptions] = useState<ValueType[]>([]);\n  const fetchRef = useRef(0);\n\n  const debounceFetcher = useMemo(() => {\n    const loadOptions = (value: string) => {\n      fetchRef.current += 1;\n      const fetchId = fetchRef.current;\n      setOptions([]);\n      setFetching(true);\n\n      fetchOptions(value).then((newOptions) => {\n        if (fetchId !== fetchRef.current) {\n          // for fetch callback order\n          return;\n        }\n\n        setOptions(newOptions);\n        setFetching(false);\n      });\n    };\n\n    return debounce(loadOptions, debounceTimeout);\n  }, [fetchOptions, debounceTimeout]);\n\n  return (\n    <Select\n      labelInValue\n      filterOption={false}\n      onSearch={debounceFetcher}\n      notFoundContent={fetching ? <Spin size=\"small\" /> : null}\n      {...props}\n      options={options}\n    />\n  );\n}\n\n// Usage of DebounceSelect\ninterface UserValue {\n  label: string;\n  value: string;\n}\n\nasync function fetchUserList(username: string): Promise<UserValue[]> {\n  console.log('fetching user', username);\n\n  return fetch('https://randomuser.me/api/?results=5')\n    .then((response) => response.json())\n    .then((body) =>\n      body.results.map(\n        (user: { name: { first: string; last: string }; login: { username: string } }) => ({\n          label: `${user.name.first} ${user.name.last}`,\n          value: user.login.username,\n        }),\n      ),\n    );\n}\n\nconst App: React.FC = () => {\n  const [value, setValue] = useState<UserValue[]>([]);\n\n  return (\n    <DebounceSelect\n      mode=\"multiple\"\n      value={value}\n      placeholder=\"Select users\"\n      fetchOptions={fetchUserList}\n      onChange={(newValue) => {\n        setValue(newValue as UserValue[]);\n      }}\n      style={{ width: '100%' }}\n    />\n  );\n};\n\nexport default App;\n"],"names":[],"mappings":"uOAyFA,+CAAA,4CAzFO,oBAAgJ,gBAC1H,oBAER,aAQrB,SAAS,EAEP,CAAE,aAAA,CAAY,CAAE,gBAAA,EAAkB,GAAG,CAAE,GAAG,EAAuC,EACjF,GAAM,CAAC,EAAU,EAAY,CAAG,GAAA,UAAQ,EAAC,CAAA,GACnC,CAAC,EAAS,EAAW,CAAG,GAAA,UAAQ,EAAc,EAAE,EAChD,EAAW,GAAA,QAAM,EAAC,GAElB,EAAkB,GAAA,SAAO,EAAC,IAkBvB,GAAA,SAAQ,EAjBK,AAAC,IACnB,EAAS,OAAO,EAAI,EACpB,IAAM,EAAU,EAAS,OAAO,CAChC,EAAW,EAAE,EACb,EAAY,CAAA,GAEZ,EAAa,GAAO,IAAI,CAAC,AAAC,IACpB,IAAY,EAAS,OAAO,GAKhC,EAAW,GACX,EAAY,CAAA,IACd,GACF,EAE6B,GAC5B,CAAC,EAAc,EAAgB,EAElC,MACE,UAAC,QAAM,EACL,YAAY,IACZ,aAAc,CAAA,EACd,SAAU,EACV,gBAAiB,EAAW,UAAC,MAAI,EAAC,KAAK,UAAa,KACnD,GAAG,CAAK,CACT,QAAS,IAGf,CAQA,eAAe,EAAc,CAAgB,EAG3C,OAFA,QAAQ,GAAG,CAAC,gBAAiB,GAEtB,MAAM,wCACV,IAAI,CAAC,AAAC,GAAa,EAAS,IAAI,IAChC,IAAI,CAAC,AAAC,GACL,EAAK,OAAO,CAAC,GAAG,CACd,AAAC,GAAkF,CAAA,CACjF,MAAO,CAAC,EAAE,EAAK,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,EAAK,IAAI,CAAC,IAAI,CAAC,CAAC,CAC7C,MAAO,EAAK,KAAK,CAAC,QAAQ,AAC5B,CAAA,IAGR,KAmBA,EAjBsB,KACpB,GAAM,CAAC,EAAO,EAAS,CAAG,GAAA,UAAQ,EAAc,EAAE,EAElD,MACE,UAAC,GACC,KAAK,WACL,MAAO,EACP,YAAY,eACZ,aAAc,EACd,SAAU,AAAC,IACT,EAAS,GACX,EACA,MAAO,CAAE,MAAO,MAAO,IAG7B"}