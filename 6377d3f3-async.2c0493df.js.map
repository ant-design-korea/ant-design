{"version":3,"sources":["components/form/demo/customized-form-controls.tsx?techStack=react"],"sourcesContent":["import '/home/runner/work/ant-design/ant-design/components/form/demo/customized-form-controls.tsx?watch=parent';import React, { useState } from 'react';\nimport { Button, Form, Input, Select } from 'antd';\n\nconst { Option } = Select;\n\ntype Currency = 'rmb' | 'dollar';\n\ninterface PriceValue {\n  number?: number;\n  currency?: Currency;\n}\n\ninterface PriceInputProps {\n  id?: string;\n  value?: PriceValue;\n  onChange?: (value: PriceValue) => void;\n}\n\nconst PriceInput: React.FC<PriceInputProps> = (props) => {\n  const { id, value = {}, onChange } = props;\n  const [number, setNumber] = useState(0);\n  const [currency, setCurrency] = useState<Currency>('rmb');\n\n  const triggerChange = (changedValue: { number?: number; currency?: Currency }) => {\n    onChange?.({ number, currency, ...value, ...changedValue });\n  };\n\n  const onNumberChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newNumber = parseInt(e.target.value || '0', 10);\n    if (Number.isNaN(number)) {\n      return;\n    }\n    if (!('number' in value)) {\n      setNumber(newNumber);\n    }\n    triggerChange({ number: newNumber });\n  };\n\n  const onCurrencyChange = (newCurrency: Currency) => {\n    if (!('currency' in value)) {\n      setCurrency(newCurrency);\n    }\n    triggerChange({ currency: newCurrency });\n  };\n\n  return (\n    <span id={id}>\n      <Input\n        type=\"text\"\n        value={value.number || number}\n        onChange={onNumberChange}\n        style={{ width: 100 }}\n      />\n      <Select\n        value={value.currency || currency}\n        style={{ width: 80, margin: '0 8px' }}\n        onChange={onCurrencyChange}\n      >\n        <Option value=\"rmb\">RMB</Option>\n        <Option value=\"dollar\">Dollar</Option>\n      </Select>\n    </span>\n  );\n};\n\nconst App: React.FC = () => {\n  const onFinish = (values: any) => {\n    console.log('Received values from form: ', values);\n  };\n\n  const checkPrice = (_: any, value: { number: number }) => {\n    if (value.number > 0) {\n      return Promise.resolve();\n    }\n    return Promise.reject(new Error('Price must be greater than zero!'));\n  };\n\n  return (\n    <Form\n      name=\"customized_form_controls\"\n      layout=\"inline\"\n      onFinish={onFinish}\n      initialValues={{\n        price: {\n          number: 0,\n          currency: 'rmb',\n        },\n      }}\n    >\n      <Form.Item name=\"price\" label=\"Price\" rules={[{ validator: checkPrice }]}>\n        <PriceInput />\n      </Form.Item>\n      <Form.Item>\n        <Button type=\"primary\" htmlType=\"submit\">\n          Submit\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default App;\n"],"names":[],"mappings":"uOAqGA,+CAAA,4BArGO,oBAAyI,gBACpG,YAE5C,GAAM,CAAE,OAAA,CAAM,CAAE,CAAG,QAAM,CAenB,EAAwC,AAAC,IAC7C,GAAM,CAAE,GAAA,CAAE,CAAE,MAAA,EAAQ,CAAC,CAAC,CAAE,SAAA,CAAQ,CAAE,CAAG,EAC/B,CAAC,EAAQ,EAAU,CAAG,GAAA,UAAQ,EAAC,GAC/B,CAAC,EAAU,EAAY,CAAG,GAAA,UAAQ,EAAW,OAE7C,EAAgB,AAAC,UACrB,GAAA,EAAW,CAAE,OAAA,EAAQ,SAAA,EAAU,GAAG,CAAK,CAAE,GAAG,CAAY,AAAC,GAC3D,EAoBA,MACE,WAAC,QAAK,GAAI,YACR,UAAC,OAAK,EACJ,KAAK,OACL,MAAO,EAAM,MAAM,EAAI,EACvB,SAvBiB,AAAC,IACtB,IAAM,EAAY,SAAS,EAAE,MAAM,CAAC,KAAK,EAAI,IAAK,IAC9C,OAAO,KAAK,CAAC,KAGX,WAAY,GAChB,EAAU,GAEZ,EAAc,CAAE,OAAQ,CAAU,IACpC,EAeM,MAAO,CAAE,MAAO,GAAI,IAEtB,WAAC,QAAM,EACL,MAAO,EAAM,QAAQ,EAAI,EACzB,MAAO,CAAE,MAAO,GAAI,OAAQ,OAAQ,EACpC,SAlBmB,AAAC,IAClB,aAAc,GAClB,EAAY,GAEd,EAAc,CAAE,SAAU,CAAY,GACxC,YAeM,UAAC,GAAO,MAAM,eAAM,QACpB,UAAC,GAAO,MAAM,kBAAS,iBAI/B,MAsCA,EApCsB,IAalB,WAAC,MAAI,EACH,KAAK,2BACL,OAAO,SACP,SAfa,AAAC,IAChB,QAAQ,GAAG,CAAC,8BAA+B,GAC7C,EAcI,cAAe,CACb,MAAO,CACL,OAAQ,EACR,SAAU,KACZ,CACF,YAEA,UAAC,MAAI,CAAC,IAAI,EAAC,KAAK,QAAQ,MAAM,QAAQ,MAAO,CAAC,CAAE,UAnBjC,CAAC,EAAQ,IAC1B,AAAI,EAAM,MAAM,CAAG,EACV,QAAQ,OAAO,GAEjB,QAAQ,MAAM,CAAC,AAAI,MAAM,oCAewC,EAAE,UACtE,UAAC,QAEH,UAAC,MAAI,CAAC,IAAI,WACR,UAAC,QAAM,EAAC,KAAK,UAAU,SAAS,kBAAS"}