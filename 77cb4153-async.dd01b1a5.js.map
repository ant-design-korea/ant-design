{"version":3,"sources":["docs/blog/type-util.zh-CN.md?type=text"],"sourcesContent":["\n  import '/home/runner/work/ant-design/ant-design/docs/blog/type-util.zh-CN.md?watch=parent';\n  export const texts = [{\"value\":\"TypeScript 的类型定义是非常强大的帮手，它可以解决很多问题，帮助开发者提前发现类型错误从而避免在运行时痛苦的调试。在 antd 中，我们也将组件的基本定义都进行了导出：\",\"paraId\":0},{\"value\":\"import React from 'react';\\nimport { Table, type TableColumnsType } from 'antd';\\n\\nconst columns: TableColumnsType = [\\n  {\\n    title: 'Name',\\n    dataIndex: 'name',\\n    key: 'name',\\n  },\\n];\\n\\nexport default () => <Table columns={columns} />;\\n\",\"paraId\":1},{\"value\":\"这些类型定义满足了大多数场景，但是有时候开发者希望获得更精细的类型定义，antd 并不一定将其导出。在过去，我们推荐开发通过 TypeScript 的类型体操进行自行拓展来满足需求：\",\"paraId\":2},{\"value\":\"import type { SelectProps } from 'antd';\\n\\ntype SelectOption<T> = NonNullable<SelectProps<T>['options']>[number];\\n\",\"paraId\":3},{\"value\":\"这对于 TypeScript 熟悉的朋友而言，应该不是什么难事。但是对于 TypeScript 初学者而言，这可能是一道难题。因此，我们推出了一个工具类型库，帮助开发者简化抽取类型的过程。\",\"paraId\":4},{\"value\":\"现在在 antd 中，我们额外提供了 3 个工具类型：\",\"paraId\":5,\"tocIndex\":0},{\"value\":\"GetProps<ComponentType>\",\"paraId\":6,\"tocIndex\":0},{\"value\":\"GetProp<ComponentTypeOrComponentPropsType, PropName>\",\"paraId\":6,\"tocIndex\":0},{\"value\":\"GetRef<ComponentType>\",\"paraId\":6,\"tocIndex\":0},{\"value\":\"前两者用户帮助开发者抽取组件的 props 类型，最后一个用于抽取组件的 ref 类型。我们可以通过下面的例子来理解这些类型的用法：\",\"paraId\":7,\"tocIndex\":0},{\"value\":\"antd 中，对于一些组件的子组件定义不一定被导出。你可以直接通过 \",\"paraId\":8,\"tocIndex\":1},{\"value\":\"GetProps\",\"paraId\":8,\"tocIndex\":1},{\"value\":\" 来获取：\",\"paraId\":8,\"tocIndex\":1},{\"value\":\"import type { Checkbox, GetProps } from 'antd';\\n\\ntype CheckboxGroupType = GetProps<typeof Checkbox.Group>;\\n\",\"paraId\":9,\"tocIndex\":1},{\"value\":\"对于组件的属性类型，我们可以通过 \",\"paraId\":10,\"tocIndex\":2},{\"value\":\"GetProp\",\"paraId\":10,\"tocIndex\":2},{\"value\":\" 来获取。它已经将 \",\"paraId\":10,\"tocIndex\":2},{\"value\":\"NonNullable\",\"paraId\":10,\"tocIndex\":2},{\"value\":\" 进行了封装。所以不用再考虑为空的情况：\",\"paraId\":10,\"tocIndex\":2},{\"value\":\"import type { GetProp, Select, SelectProps } from 'antd';\\n\\n// Both of this can work\\ntype SelectOptionType1 = GetProp<SelectProps, 'options'>[number];\\ntype SelectOptionType2 = GetProp<typeof Select, 'options'>[number];\\n\",\"paraId\":11,\"tocIndex\":2},{\"value\":\"通过 \",\"paraId\":12,\"tocIndex\":3},{\"value\":\"GetRef\",\"paraId\":12,\"tocIndex\":3},{\"value\":\"，你不用再记忆组件的 ref 类型到底是 HTMLElement 或者什么特别的定义。直接用就完了：\",\"paraId\":12,\"tocIndex\":3},{\"value\":\"import React, { forwardRef } from 'react';\\nimport type { GetRef, Select } from 'antd';\\n\\ntype SelectRefType = GetRef<typeof Select>; // BaseSelectRef\\n\\nconst Div = forwardRef<HTMLDivElement>((_, ref) => <div ref={ref} />);\\ntype DomRefType = GetRef<typeof Div>; // HTMLDivElement\\n\",\"paraId\":13,\"tocIndex\":3},{\"value\":\"以上就是我们推出的工具类型，希望能够帮助到大家。如果你有更好的想法，欢迎在 GitHub 上提出 issue 或者 PR。\",\"paraId\":14,\"tocIndex\":4}];\n  "],"names":[],"mappings":"uOAEe,6CAAA,QADN,YACA,IAAM,EAAQ,CAAC,CAAC,MAAQ,ocAA4F,OAAS,CAAC,EAAE,CAAC,MAAQ,8PAA8P,OAAS,CAAC,EAAE,CAAC,MAAQ,gdAA8F,OAAS,CAAC,EAAE,CAAC,MAAQ,uHAAuH,OAAS,CAAC,EAAE,CAAC,MAAQ,+bAAiG,OAAS,CAAC,EAAE,CAAC,MAAQ,wHAA8B,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,0BAA0B,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,uDAAuD,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,wBAAwB,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,mVAAqE,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,iLAAqC,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,WAAW,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,4BAAQ,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,iHAAiH,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,oGAAoB,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,UAAU,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,qDAAa,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,cAAc,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,sHAAuB,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,kOAAkO,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,gBAAM,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,SAAS,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,qNAAqD,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,+RAA+R,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,uRAAgE,OAAS,GAAG,SAAW,CAAC,EAAE"}