{"version":3,"sources":["docs/blog/extract-ssr.zh-CN.md?type=text"],"sourcesContent":["\n  import '/home/runner/work/ant-design/ant-design/docs/blog/extract-ssr.zh-CN.md?watch=parent';\n  export const texts = [{\"value\":\"传统的 js + css 网站，SSR 一般只需要处理好首次渲染的注水问题。而当 CSS-in-JS 技术的引入，开发者则需要额外关注如何将样式导出到 HTML 中，以保证首次渲染的正确性。我们提供了非常多的实现方式，也正好在此聊聊其中的思路。如果你需要完整的文档或者示例欢迎查阅\",\"paraId\":0},{\"value\":\"《定制主题》\",\"paraId\":1},{\"value\":\"。\",\"paraId\":0},{\"value\":\"最简单的方式就是将样式直接内联到 HTML 中，这样就不需要额外的请求。这种方式的缺点是，样式无法被浏览器缓存，每次请求都需要重新下载。而且，如果样式过多，会导致 HTML 文件过大，影响首次渲染的速度。\",\"paraId\":2,\"tocIndex\":0},{\"value\":\"在 v5 alpha 版本中，为了兜底 SSR 样式渲染，我们参考 \",\"paraId\":3,\"tocIndex\":0},{\"value\":\"Emotion\",\"paraId\":3,\"tocIndex\":0},{\"value\":\" 的实现，为每个元素前都加上对应的内联样式：\",\"paraId\":3,\"tocIndex\":0},{\"value\":\"<div>\\n  <style>\\n    :where(.css-bAmBOo).ant-btn {\\n      // ...\\n    }\\n  </style>\\n  <button className=\\\"ant-btn css-bAmBOo\\\">Hello World</button>\\n</div>\\n\",\"paraId\":4,\"tocIndex\":0},{\"value\":\"这个实现简单有效，唯一的缺点则是对于 \",\"paraId\":5,\"tocIndex\":0},{\"value\":\":nth\",\"paraId\":5,\"tocIndex\":0},{\"value\":\" 选择会有样式污染。但是考虑到 antd 组件其实很少使用这个样式，副作用对我们没什么影响。\",\"paraId\":5,\"tocIndex\":0},{\"value\":\"开始的时候运行良好，antd 的官网几乎无需改造就直接支持 SSR 样式满足了 SEO 需求。但是随着我们组件逐渐迁移到 CSS-in-JS 版本后，我们发现站点的构建产物变得十分巨大，慢慢的变得不可用。在查看 HTML 后，我们发现默认内联方式并不好，它会导致样式被成倍的内联，例如一个页面里有 3 个 Button，那它就会重复内联 3 次：\",\"paraId\":6,\"tocIndex\":0},{\"value\":\"<div>\\n  <style>\\n    :where(.css-bAmBOo).ant-btn {\\n      // ...\\n    }\\n  </style>\\n  <button className=\\\"ant-btn css-bAmBOo\\\">Hello World 1</button>\\n  <style>\\n    :where(.css-bAmBOo).ant-btn {\\n      // ...\\n    }\\n  </style>\\n  <button className=\\\"ant-btn css-bAmBOo\\\">Hello World 2</button>\\n  <style>\\n    :where(.css-bAmBOo).ant-btn {\\n      // ...\\n    }\\n  </style>\\n  <button className=\\\"ant-btn css-bAmBOo\\\">Hello World 3</button>\\n</div>\\n\",\"paraId\":7,\"tocIndex\":0},{\"value\":\"而当大部分组件都转成 CSS-in-JS 后，内联样式会变得十分巨大。所以我们在后期移除了自动内联的功能，转成了需要手动收取的形式：\",\"paraId\":8,\"tocIndex\":0},{\"value\":\"import { createCache, extractStyle, StyleProvider } from '@ant-design/cssinjs';\\nimport { renderToString } from 'react-dom/server';\\n\\nconst cache = createCache();\\n\\n// HTML Content\\nconst html = renderToString(\\n  <StyleProvider cache={cache}>\\n    <MyApp />\\n  </StyleProvider>,\\n);\\n\\n// Style Content\\nconst styleText = extractStyle(cache);\\n\",\"paraId\":9,\"tocIndex\":0},{\"value\":\"这是传统的 CSS-in-JS 注入实现。就如引言所述，内联样式无法缓存会造成额外的加载开销。也因此，我们尝试探索一些新的实现方式，可以获得如原生 CSS 的加载体验。\",\"paraId\":10,\"tocIndex\":0},{\"value\":\"我们在思考是否可以如 v4 版本一样，预先烘焙组件的样式来使前端消费，所以提出了 \",\"paraId\":11,\"tocIndex\":1},{\"value\":\"[RFC] Static Extract style\",\"paraId\":11,\"tocIndex\":1},{\"value\":\"。它的思路很简单，我们只需要提前将所有的组件进行一次渲染就可以从 cache 中获得完整的样式，然后将其写入到 css 文件中即可。\",\"paraId\":11,\"tocIndex\":1},{\"value\":\"const cache = createCache();\\n\\n// HTML Content\\nrenderToString(\\n  <StyleProvider cache={cache}>\\n    <Button />\\n    <Switch />\\n    <Input />\\n    {/* Rest antd components */}\\n  </StyleProvider>,\\n);\\n\\n// Style Content\\nconst styleText = extractStyle(cache);\\n\",\"paraId\":12,\"tocIndex\":1},{\"value\":\"当然，这对于开发者而言稍微有点麻烦。所以我们提取了一个三方包来实现该需求：\",\"paraId\":13,\"tocIndex\":1},{\"value\":\"import { extractStyle } from '@ant-design/static-style-extract';\\nimport fs from 'fs';\\n\\n// `extractStyle` containers all the antd component\\n// excludes popup like component which is no need in ssr: Modal, message, notification, etc.\\nconst css = extractStyle();\\n\\nfs.writeFile(...);\\n\",\"paraId\":14,\"tocIndex\":1},{\"value\":\"如果开发者使用了混合主题，也可以自行实现混合需求：\",\"paraId\":15,\"tocIndex\":1},{\"value\":\"// `node` is the components set we prepared\\nconst css = extractStyle((node) => (\\n  <>\\n    <ConfigProvider theme={theme1}>{node}</ConfigProvider>\\n    <ConfigProvider theme={theme2}>{node}</ConfigProvider>\\n    <ConfigProvider theme={theme3}>{node}</ConfigProvider>\\n  </>\\n));\\n\",\"paraId\":16,\"tocIndex\":1},{\"value\":\"在大部分情况下，上面的用法已经满足了需求。但是有时候，我们会希望兼顾 CSS-in-JS 的灵活性，又获得静态文件缓存的好处。那么这个时候我们就需要在应用层面进行下手，在渲染导出所需的内容后，不同于 Inline Style，而是将其转为文件存储。通过简单的 hash 就可以实现文件的缓存：\",\"paraId\":17,\"tocIndex\":2},{\"value\":\"import { createHash } from 'crypto';\\n\\n// Get Style content like above\\nconst styleText = extractStyle(cache);\\n\\nconst hash = createHash('md5').update(styleText).digest('hex');\\nconst cssFileName = `css-${hash.substring(0, 8)}.css`;\\n\\nif (!fs.existsSync(cssFileName)) {\\n  fs.writeFileSync(cssFileName, styleText);\\n}\\n\",\"paraId\":18,\"tocIndex\":2},{\"value\":\"然后在 HTML 模板侧添加对应的 CSS 文件：\",\"paraId\":19,\"tocIndex\":2},{\"value\":\"<!doctype html>\\n<html>\\n  <head>\\n    <link rel=\\\"stylesheet\\\" href=\\\"${hashCssFileUrl}\\\" />\\n  </head>\\n  <body>\\n    <div id=\\\"root\\\">${html}</div>\\n  </body>\\n</html>\\n\",\"paraId\":20,\"tocIndex\":2},{\"value\":\"完整实现点击\",\"paraId\":21,\"tocIndex\":2},{\"value\":\"此处\",\"paraId\":21,\"tocIndex\":2},{\"value\":\"查阅。\",\"paraId\":21,\"tocIndex\":2},{\"value\":\"访问不同的页面时会生成对应的 CSS，每个 CSS 都会有其对应的 Hash 值。当 Hash 命中时，则说明该 CSS 文件已经被落盘，可以直接使用。继而对于客户端而言就是一次正常的 CSS 文件访问，同样享受缓存能力。\",\"paraId\":22,\"tocIndex\":2},{\"value\":\"对于不同的用户访问相同的页面所需的样式不同或者说自定义主题不同，都可以通过该 Hash 作区分。\",\"paraId\":23,\"tocIndex\":2},{\"value\":\"对于不复杂的应用而言，我们更推荐使用前者 Static Extract Style。它已经足够简单，但是对于想更细粒度控制 SSR 样式渲染以获得更好的访问速度体验的开发者，则可以试试部分静态化的能力。以上。\",\"paraId\":24,\"tocIndex\":3}];\n  "],"names":[],"mappings":"uOAEe,6CAAA,QADN,YACA,IAAM,EAAQ,CAAC,CAAC,MAAQ,grBAA+I,OAAS,CAAC,EAAE,CAAC,MAAQ,uCAAS,OAAS,CAAC,EAAE,CAAC,MAAQ,SAAI,OAAS,CAAC,EAAE,CAAC,MAAQ,2iBAAyG,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,+HAAqC,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,UAAU,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,kIAAyB,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,gKAAkK,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,gHAAsB,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,OAAO,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,oPAAiD,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,gzBAAgL,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,kcAAwc,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,wVAAqE,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,8VAA8V,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,2aAAuF,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,gOAA4C,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,6BAA6B,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,mVAAqE,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,4QAA4Q,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,iOAAwC,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,mSAAmS,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,yJAA4B,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,4RAA4R,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,ytBAAqJ,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,qUAAqU,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,kGAA4B,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,yKAA+K,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,uCAAS,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,eAAK,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,qBAAM,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,kgBAAkH,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,qQAAmD,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,ifAA2G,OAAS,GAAG,SAAW,CAAC,EAAE"}