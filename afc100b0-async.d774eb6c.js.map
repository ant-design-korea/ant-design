{"version":3,"sources":["docs/blog/why-not-static.zh-CN.md?type=text"],"sourcesContent":["\n  import '/home/runner/work/ant-design/ant-design/docs/blog/why-not-static.zh-CN.md?watch=parent';\n  export const texts = [{\"value\":\"message.success\",\"paraId\":0},{\"value\":\" 用的好好的为什么要 warning 我去用 hooks？antd 越做越垃圾，走好不送！\",\"paraId\":0},{\"value\":\"我们在社交渠道听到了不少关于静态方法转 hooks 的质疑。我们深知这非常痛苦，但是在经过多年的考虑后，我们还是决定在 v5 做一次切割（是的，这个讨论甚至比 hooks 存在还久远，但是在 hooks 之前一直没有简单的实现方式，我们也就一直将其搁置在一边）。\",\"paraId\":1},{\"value\":\"在 JS 之初，就存在一个简单好用的 API \",\"paraId\":2,\"tocIndex\":0},{\"value\":\"alert\",\"paraId\":2,\"tocIndex\":0},{\"value\":\"。你可以在任何时候、任何地方调用它。而到了框架层面，这种便捷同样令人心驰神往。一个常见的例子就是我在 Redux 中，ajax 获取数据失败就调用一下 \",\"paraId\":2,\"tocIndex\":0},{\"value\":\"message.error\",\"paraId\":2,\"tocIndex\":0},{\"value\":\" 在屏幕上展示一个错误信息：\",\"paraId\":2,\"tocIndex\":0},{\"value\":\"然而从数据流角度看，这其实耦合了 UI 和 数据层。只是因为其看起来调用时并不直接依赖 UI 上下文，所以它看起来是无害的而已。从测试角度看，这种耦合也会让测试变得复杂。\",\"paraId\":3,\"tocIndex\":0},{\"value\":\"在函数中调用静态方法，虽然看起来存在上下文。但是实际上静态方法并不会消费上下文，它会独立于当前 React 生命周期，因而通过 Context 获取的内容其实什么都得不到：\",\"paraId\":4,\"tocIndex\":1},{\"value\":\"const Context = React.createContext('default');\\n\\nconst MyContent = () => React.useContext(Context);\\n\\nconst Wrapper = () => {\\n  React.useEffect(() => {\\n    // Static function is out of context.\\n    // We can only get `default` instead of `Hello World`.\\n    message.success(<MyContent />);\\n  }, []);\\n\\n  return null;\\n};\\n\\nconst Demo = () => (\\n  <Context.Provider value=\\\"Hello World\\\">\\n    <Wrapper />\\n  </Context.Provider>\\n);\\n\",\"paraId\":5,\"tocIndex\":1},{\"value\":\"静态方法实现其实是通过独立的 \",\"paraId\":6,\"tocIndex\":1},{\"value\":\"ReactDOM.render\",\"paraId\":6,\"tocIndex\":1},{\"value\":\" 来创建一个新的 React 实例，在可以获得任意场景调用的同时也和当前调用者上下文完全无关。所以你很容易就想到，如果我配置了主题、国际化、全局配置等等，那么这些配置都不会生效。\",\"paraId\":6,\"tocIndex\":1},{\"value\":\"在我说到这里的同时，你可能会反应到：“等等！antd 的静态方法国际化是生效的呀！”\",\"paraId\":7,\"tocIndex\":1},{\"value\":\"没错，但是这并不是真正的消费了 Context，而是我们做了一个非常 Hack 的实现。当用户通过 ConfigProvider 提供 \",\"paraId\":8,\"tocIndex\":1},{\"value\":\"locale\",\"paraId\":8,\"tocIndex\":1},{\"value\":\" 属性时，我们会临时将其存到一个全局变量中。而当静态方法调用时，则使用其进行填充：\",\"paraId\":8,\"tocIndex\":1},{\"value\":\"// Sample. Not real world code.\\nlet globalLocale = null;\\n\\nconst ConfigProvider = (props) => {\\n  if (props.locale) {\\n    globalLocale = props.locale;\\n  }\\n\\n  // ...\\n};\\n\\nModal.confirm = (props) => {\\n  // ...\\n\\n  ReactDOM.render(\\n    <ConfigProvider locale={globalLocale}>\\n      <Modal {...modalProps} />\\n    </ConfigProvider>,\\n  );\\n};\\n\",\"paraId\":9,\"tocIndex\":1},{\"value\":\"你可以很容易看出来，这个代码非常不健壮。静态方法其实根本不知道调用层级是什么，它可能是在 ConfigProvider 之内调用，也可能是在之外调用。甚至可能同时存在配置了多个 ConfigProvider 的情况。这种情况下，我们无法也不可能保证静态方法能够正确的获取到当前的配置。\",\"paraId\":10,\"tocIndex\":1},{\"value\":\"而当我们开始支持动态主题的时候，这个问题就会变得更加明显。在主题中，很容易遇到混合主题的情况。开发者在不同层级调用 Modal、message、notification 它们的样式可能完全不同。\",\"paraId\":11,\"tocIndex\":1},{\"value\":\"就如上文所述，为了消费 Context。我们调用方法时需要知道当前的节点位置，因而在 v4 中为静态方法引入了对应的 Hooks 方法：\",\"paraId\":12,\"tocIndex\":2},{\"value\":\"const Demo = () => {\\n  const [messageApi, contextHolder] = message.useMessage();\\n\\n  const info = () => {\\n    messageApi.info('Hello, Ant Design!');\\n  };\\n\\n  return (\\n    <>\\n      {/* Different insert holder position will get different context */}\\n      {contextHolder}\\n      <Button type=\\\"primary\\\" onClick={info}>\\n        Display normal message\\n      </Button>\\n    </>\\n  );\\n};\\n\",\"paraId\":13,\"tocIndex\":2},{\"value\":\"你可以发现，这其实不太方便。对于开发者而言，每个使用的地方都从过去直接调用，变成了需要额外设置注入 Context 节点。而在大多数情况下，过去静态方法的 Context 往往只需要关注国际化、主题等比较稳定的配置。所以我们如果可以有一个地方放置 Holder，其他地方直接复用那就更好了。\",\"paraId\":14,\"tocIndex\":2},{\"value\":\"因而在 v5 版本中，我们提供了 App 组件。这个组件本身带有 DOM 结构，会为自节点添加一些重置样式（比如在过去版本被人诟病的全局样式污染，现在只会作用到 App 之下）。同时也为 Modal、message、notification 添加了 ContextHolder。这样开发者在应用最外层添加 App 后，代码中就可以简单的使用它们了：\",\"paraId\":15,\"tocIndex\":3},{\"value\":\"const Demo = () => {\\n  const { message } = App.useApp();\\n\\n  React.useEffect(() => {\\n    message.success('Hello World');\\n  }, []);\\n\\n  // ...\\n};\\n\",\"paraId\":16,\"tocIndex\":3},{\"value\":\"从设计角度来说，静态方法是一个非常不好的实现。但是我们深知在业务场景中，静态方法是如此便利、如此好用。即便它有一些“无伤大雅”的缺点，但是它仍然在历史中值得有一席之地。所以我们在思考，是否可以有其他的方式来将这些副作用从组件库中剥离但是同时又可以服务开发者。比如说改进 umi antd 插件，当配置 \",\"paraId\":17,\"tocIndex\":4},{\"value\":\"appData\",\"paraId\":17,\"tocIndex\":4},{\"value\":\" 时，自动将顶层的 App 实例静态化到 antd 中。当然，这只是一些想法。我们会在后续的版本中继续探索这个问题。\",\"paraId\":17,\"tocIndex\":4}];\n  "],"names":[],"mappings":"qOAEe,6CAAA,QADN,YACA,IAAM,EAAQ,CAAC,CAAC,MAAQ,kBAAkB,OAAS,CAAC,EAAE,CAAC,MAAQ,wKAAgD,OAAS,CAAC,EAAE,CAAC,MAAQ,wpBAAsI,OAAS,CAAC,EAAE,CAAC,MAAQ,gGAA0B,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,QAAQ,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,0YAA+E,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,gBAAgB,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,kFAAiB,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,odAAwF,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,ubAAyF,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,6bAA6b,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,wFAAkB,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,kBAAkB,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,ifAA4F,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,sOAA6C,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,gQAAuE,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,SAAS,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,oPAA4C,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,kWAAkW,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,urBAAiJ,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,ucAAoG,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,4TAAuE,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,8YAA8Y,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,4uBAAoJ,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,utBAAiL,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,2JAA2J,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,s1BAA0J,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,UAAU,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,mSAA6D,OAAS,GAAG,SAAW,CAAC,EAAE"}