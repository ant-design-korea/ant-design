{"version":3,"sources":["docs/blog/tree-shaking.zh-CN.md?type=text"],"sourcesContent":["\n  import '/home/runner/work/ant-design/ant-design/docs/blog/tree-shaking.zh-CN.md?watch=parent';\n  export const texts = [{\"value\":\"在现代 JS 应用中，通过模块化打包工具可以自动将一些未使用的模块代码去除，这个过程叫做 \",\"paraId\":0},{\"value\":\"Tree Shaking\",\"paraId\":0},{\"value\":\"。不过如果你已经对此非常熟悉了，你会发现现实中它并不是那么完美，我们还需要一些额外的操作才能达到最佳的体积优化效果。今天，我们就来讲讲一个 ConfigProvider 导致的 Tree Shaking 失效的问题。\",\"paraId\":0},{\"value\":\"在日常维护中，我们遇到了一些关于使用 ConfigProvider 会导致 BundleSize 变大的问题：\",\"paraId\":1,\"tocIndex\":0},{\"value\":\"https://github.com/ant-design/ant-design/issues/41607\",\"paraId\":2,\"tocIndex\":0},{\"value\":\"https://github.com/ant-design/ant-design/issues/43019\",\"paraId\":2,\"tocIndex\":0},{\"value\":\"https://github.com/ant-design/ant-design/issues/42499\",\"paraId\":2,\"tocIndex\":0},{\"value\":\"而社区在反馈的同时也把被错误打包进来的包找了出来 \",\"paraId\":3,\"tocIndex\":0},{\"value\":\"rc-field-form\",\"paraId\":3,\"tocIndex\":0},{\"value\":\"，这里我们就直接借用一下 issue 中的图示：\",\"paraId\":3,\"tocIndex\":0},{\"value\":\"ConfigProvider 提供了全局化配置能力，其中也包含了 Form 组件校验信息的自定义模板配置：\",\"paraId\":4,\"tocIndex\":0},{\"value\":\"<ConfigProvider form={{ validateMessages }} />\\n\",\"paraId\":5,\"tocIndex\":0},{\"value\":\"由于该功能对表单的校验有依赖关系，因而它由底层的 \",\"paraId\":6,\"tocIndex\":0},{\"value\":\"rc-field-form\",\"paraId\":6,\"tocIndex\":0},{\"value\":\" 提供的 FormProvider 实现。在 antd 中会先和自身的本地化后的 \",\"paraId\":6,\"tocIndex\":0},{\"value\":\"validateMessages\",\"paraId\":6,\"tocIndex\":0},{\"value\":\" 做聚合：\",\"paraId\":6,\"tocIndex\":0},{\"value\":\"// Sample only. Not real world code.\\nimport { FormProvider } from 'rc-field-form';\\n\\nconst ConfigProvider = ({ validateMessages, children }) => {\\n  const mergedValidateMessages = React.useMemo(\\n    () => merge(antdDefaultValidateMessages, validateMessages),\\n    [validateMessages],\\n  );\\n\\n  return (\\n    <FormProvider validateMessages={mergedValidateMessages}>\\n      <SomeOtherProvider>{children}</SomeOtherProvider>\\n    </FormProvider>\\n  );\\n};\\n\",\"paraId\":7,\"tocIndex\":0},{\"value\":\"而 FormProvider 本身又对 \",\"paraId\":8,\"tocIndex\":0},{\"value\":\"rc-field-form\",\"paraId\":8,\"tocIndex\":0},{\"value\":\" 的 FormContext 进行了封装，导致引入 FormProvider 后将 \",\"paraId\":8,\"tocIndex\":0},{\"value\":\"rc-field-form\",\"paraId\":8,\"tocIndex\":0},{\"value\":\" 的更多内容给打包进来了：\",\"paraId\":8,\"tocIndex\":0},{\"value\":\"你或许会想到，我们是不是可以做一个优化，如果没有配置 \",\"paraId\":9,\"tocIndex\":0},{\"value\":\"validateMessages\",\"paraId\":9,\"tocIndex\":0},{\"value\":\" 我们就不调用这个 FormProvider？\",\"paraId\":9,\"tocIndex\":0},{\"value\":\"// Sample only. Not real world code.\\nimport { FormProvider } from 'rc-field-form';\\n\\nconst ConfigProvider = ({ validateMessages, children }) => {\\n  let node = children;\\n\\n  if (validateMessages) {\\n    node = <FormProvider validateMessages={merge(...)}>{node}</FormProvider>;\\n  }\\n\\n  return node;\\n};\\n\",\"paraId\":10,\"tocIndex\":0},{\"value\":\"很遗憾，这是不行的。Tree Shaking 是静态编译过程，而 \",\"paraId\":11,\"tocIndex\":0},{\"value\":\"validateMessages\",\"paraId\":11,\"tocIndex\":0},{\"value\":\" 是一个运行时的配置。所以在打包过程中，我们无法知道 \",\"paraId\":11,\"tocIndex\":0},{\"value\":\"validateMessages\",\"paraId\":11,\"tocIndex\":0},{\"value\":\" 是否存在，因而无法做到这样的优化。\",\"paraId\":11,\"tocIndex\":0},{\"value\":\"rc-field-form\",\"paraId\":12,\"tocIndex\":1},{\"value\":\" 自然可以调整依赖，让 FormProvider 解耦。但是很明显，我们不应该依赖于第三方库的调整（虽然 \",\"paraId\":12,\"tocIndex\":1},{\"value\":\"rc-field-form\",\"paraId\":12,\"tocIndex\":1},{\"value\":\" 也由我们来维护）。我们应该从根本上解决这个问题，让 ConfigProvider 不再依赖于 FormProvider。实现也非常简单，既然这是 \",\"paraId\":12,\"tocIndex\":1},{\"value\":\"rc-field-form\",\"paraId\":12,\"tocIndex\":1},{\"value\":\" 所独有的，那么我们直接抽一个 Context 出来，让 ConfigProvider 不再感知 FormProvider 即可：\",\"paraId\":12,\"tocIndex\":1},{\"value\":\"// Sample only. Not real world code.\\nimport { ValidateMessageContext } from '../form/context.ts';\\n\\nconst ConfigProvider = ({ validateMessages, children }) => {\\n  const mergedValidateMessages = ...\\n\\n  return (\\n    // Just use the proxy context\\n    <ValidateMessageContext value={mergedValidateMessages}>\\n      <SomeOtherProvider>{children}</SomeOtherProvider>\\n    </ValidateMessageContext>\\n  );\\n};\\n\",\"paraId\":13,\"tocIndex\":1},{\"value\":\"而在 Form 中，同样消费代理的 Context：\",\"paraId\":14,\"tocIndex\":1},{\"value\":\"// Sample only. Not real world code.\\nimport Form, { FormProvider } from 'rc-field-form';\\n\\nimport { ValidateMessageContext } from './context';\\n\\nexport default (props) => {\\n  const validateMessages = React.useContext(ValidateMessageContext);\\n\\n  return (\\n    <FormProvider validateMessages={validateMessages}>\\n      <Form {...props} />\\n    </FormProvider>\\n  );\\n};\\n\",\"paraId\":15,\"tocIndex\":1},{\"value\":\"依赖就变成了这样，从而实现了解耦：\",\"paraId\":16,\"tocIndex\":1},{\"value\":\"Tree Shaking 提供了一种自动化的方式来优化打包体积，但是我们需要注意一些细节。否则可能不慎导致一些依赖被错误的引入。以上。\",\"paraId\":17,\"tocIndex\":2}];\n  "],"names":[],"mappings":"uOAEe,6CAAA,QADN,YACA,IAAM,EAAQ,CAAC,CAAC,MAAQ,wPAAgD,OAAS,CAAC,EAAE,CAAC,MAAQ,eAAe,OAAS,CAAC,EAAE,CAAC,MAAQ,qfAA+G,OAAS,CAAC,EAAE,CAAC,MAAQ,iMAA0D,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,wDAAwD,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,wDAAwD,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,wDAAwD,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,oJAA4B,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,gBAAgB,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,gHAA2B,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,wNAAwD,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,mDAAmD,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,oJAA4B,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,gBAAgB,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,2IAA4C,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,mBAAmB,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,4BAAQ,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,6cAA6c,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,gDAAuB,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,gBAAgB,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,8GAA6C,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,gBAAgB,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,4EAAgB,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,gKAA8B,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,mBAAmB,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,uEAA0B,OAAS,EAAE,SAAW,CAAC,EAAE,CAAC,MAAQ,uTAAuT,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,mIAAoC,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,mBAAmB,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,2JAA8B,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,mBAAmB,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,0GAAqB,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,gBAAgB,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,iPAAwD,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,gBAAgB,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,oSAA6E,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,gBAAgB,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,iMAAoE,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,6ZAA6Z,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,yFAA6B,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,0XAA0X,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,yGAAoB,OAAS,GAAG,SAAW,CAAC,EAAE,CAAC,MAAQ,oVAAsE,OAAS,GAAG,SAAW,CAAC,EAAE"}