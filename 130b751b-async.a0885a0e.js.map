{"version":3,"sources":["components/tree/demo/basic-controlled.tsx?techStack=react"],"sourcesContent":["import '/home/runner/work/ant-design/ant-design/components/tree/demo/basic-controlled.tsx?watch=parent';import React, { useState } from 'react';\nimport { Tree } from 'antd';\nimport type { TreeDataNode, TreeProps } from 'antd';\n\nconst treeData: TreeDataNode[] = [\n  {\n    title: '0-0',\n    key: '0-0',\n    children: [\n      {\n        title: '0-0-0',\n        key: '0-0-0',\n        children: [\n          { title: '0-0-0-0', key: '0-0-0-0' },\n          { title: '0-0-0-1', key: '0-0-0-1' },\n          { title: '0-0-0-2', key: '0-0-0-2' },\n        ],\n      },\n      {\n        title: '0-0-1',\n        key: '0-0-1',\n        children: [\n          { title: '0-0-1-0', key: '0-0-1-0' },\n          { title: '0-0-1-1', key: '0-0-1-1' },\n          { title: '0-0-1-2', key: '0-0-1-2' },\n        ],\n      },\n      {\n        title: '0-0-2',\n        key: '0-0-2',\n      },\n    ],\n  },\n  {\n    title: '0-1',\n    key: '0-1',\n    children: [\n      { title: '0-1-0-0', key: '0-1-0-0' },\n      { title: '0-1-0-1', key: '0-1-0-1' },\n      { title: '0-1-0-2', key: '0-1-0-2' },\n    ],\n  },\n  {\n    title: '0-2',\n    key: '0-2',\n  },\n];\n\nconst App: React.FC = () => {\n  const [expandedKeys, setExpandedKeys] = useState<React.Key[]>(['0-0-0', '0-0-1']);\n  const [checkedKeys, setCheckedKeys] = useState<React.Key[]>(['0-0-0']);\n  const [selectedKeys, setSelectedKeys] = useState<React.Key[]>([]);\n  const [autoExpandParent, setAutoExpandParent] = useState<boolean>(true);\n\n  const onExpand: TreeProps['onExpand'] = (expandedKeysValue) => {\n    console.log('onExpand', expandedKeysValue);\n    // if not set autoExpandParent to false, if children expanded, parent can not collapse.\n    // or, you can remove all expanded children keys.\n    setExpandedKeys(expandedKeysValue);\n    setAutoExpandParent(false);\n  };\n\n  const onCheck: TreeProps['onCheck'] = (checkedKeysValue) => {\n    console.log('onCheck', checkedKeysValue);\n    setCheckedKeys(checkedKeysValue as React.Key[]);\n  };\n\n  const onSelect: TreeProps['onSelect'] = (selectedKeysValue, info) => {\n    console.log('onSelect', info);\n    setSelectedKeys(selectedKeysValue);\n  };\n\n  return (\n    <Tree\n      checkable\n      onExpand={onExpand}\n      expandedKeys={expandedKeys}\n      autoExpandParent={autoExpandParent}\n      onCheck={onCheck}\n      checkedKeys={checkedKeys}\n      onSelect={onSelect}\n      selectedKeys={selectedKeys}\n      treeData={treeData}\n    />\n  );\n};\n\nexport default App;\n"],"names":[],"mappings":"uOAuFA,+CAAA,4BAvFO,oBAAiI,gBACnH,YAGrB,IAAM,EAA2B,CAC/B,CACE,MAAO,MACP,IAAK,MACL,SAAU,CACR,CACE,MAAO,QACP,IAAK,QACL,SAAU,CACR,CAAE,MAAO,UAAW,IAAK,SAAU,EACnC,CAAE,MAAO,UAAW,IAAK,SAAU,EACnC,CAAE,MAAO,UAAW,IAAK,SAAU,EACpC,AACH,EACA,CACE,MAAO,QACP,IAAK,QACL,SAAU,CACR,CAAE,MAAO,UAAW,IAAK,SAAU,EACnC,CAAE,MAAO,UAAW,IAAK,SAAU,EACnC,CAAE,MAAO,UAAW,IAAK,SAAU,EACpC,AACH,EACA,CACE,MAAO,QACP,IAAK,OACP,EACD,AACH,EACA,CACE,MAAO,MACP,IAAK,MACL,SAAU,CACR,CAAE,MAAO,UAAW,IAAK,SAAU,EACnC,CAAE,MAAO,UAAW,IAAK,SAAU,EACnC,CAAE,MAAO,UAAW,IAAK,SAAU,EACpC,AACH,EACA,CACE,MAAO,MACP,IAAK,KACP,EACD,KAyCD,EAvCsB,KACpB,GAAM,CAAC,EAAc,EAAgB,CAAG,GAAA,UAAQ,EAAc,CAAC,QAAS,QAAQ,EAC1E,CAAC,EAAa,EAAe,CAAG,GAAA,UAAQ,EAAc,CAAC,QAAQ,EAC/D,CAAC,EAAc,EAAgB,CAAG,GAAA,UAAQ,EAAc,EAAE,EAC1D,CAAC,EAAkB,EAAoB,CAAG,GAAA,UAAQ,EAAU,CAAA,GAoBlE,MACE,UAAC,MAAI,EACH,SAAS,IACT,SArBoC,AAAC,IACvC,QAAQ,GAAG,CAAC,WAAY,GAGxB,EAAgB,GAChB,EAAoB,CAAA,GACtB,EAgBI,aAAc,EACd,iBAAkB,EAClB,QAhBkC,AAAC,IACrC,QAAQ,GAAG,CAAC,UAAW,GACvB,EAAe,GACjB,EAcI,YAAa,EACb,SAboC,CAAC,EAAmB,KAC1D,QAAQ,GAAG,CAAC,WAAY,GACxB,EAAgB,GAClB,EAWI,aAAc,EACd,SAAU,IAGhB"}