{"version":3,"sources":["components/transfer/demo/table-transfer.tsx?techStack=react"],"sourcesContent":["import '/home/runner/work/ant-design/ant-design/components/transfer/demo/table-transfer.tsx?watch=parent';import React, { useState } from 'react';\nimport { Flex, Switch, Table, Tag, Transfer } from 'antd';\nimport type { GetProp, TableColumnsType, TableProps, TransferProps } from 'antd';\n\ntype TransferItem = GetProp<TransferProps, 'dataSource'>[number];\ntype TableRowSelection<T extends object> = TableProps<T>['rowSelection'];\n\ninterface DataType {\n  key: string;\n  title: string;\n  description: string;\n  tag: string;\n}\n\ninterface TableTransferProps extends TransferProps<TransferItem> {\n  dataSource: DataType[];\n  leftColumns: TableColumnsType<DataType>;\n  rightColumns: TableColumnsType<DataType>;\n}\n\n// Customize Table Transfer\nconst TableTransfer: React.FC<TableTransferProps> = (props) => {\n  const { leftColumns, rightColumns, ...restProps } = props;\n  return (\n    <Transfer style={{ width: '100%' }} {...restProps}>\n      {({\n        direction,\n        filteredItems,\n        onItemSelect,\n        onItemSelectAll,\n        selectedKeys: listSelectedKeys,\n        disabled: listDisabled,\n      }) => {\n        const columns = direction === 'left' ? leftColumns : rightColumns;\n        const rowSelection: TableRowSelection<TransferItem> = {\n          getCheckboxProps: () => ({ disabled: listDisabled }),\n          onChange(selectedRowKeys) {\n            onItemSelectAll(selectedRowKeys, 'replace');\n          },\n          selectedRowKeys: listSelectedKeys,\n          selections: [Table.SELECTION_ALL, Table.SELECTION_INVERT, Table.SELECTION_NONE],\n        };\n\n        return (\n          <Table\n            rowSelection={rowSelection}\n            columns={columns}\n            dataSource={filteredItems}\n            size=\"small\"\n            style={{ pointerEvents: listDisabled ? 'none' : undefined }}\n            onRow={({ key, disabled: itemDisabled }) => ({\n              onClick: () => {\n                if (itemDisabled || listDisabled) {\n                  return;\n                }\n                onItemSelect(key, !listSelectedKeys.includes(key));\n              },\n            })}\n          />\n        );\n      }}\n    </Transfer>\n  );\n};\n\nconst mockTags = ['cat', 'dog', 'bird'];\n\nconst mockData = Array.from({ length: 20 }).map<DataType>((_, i) => ({\n  key: i.toString(),\n  title: `content${i + 1}`,\n  description: `description of content${i + 1}`,\n  tag: mockTags[i % 3],\n}));\n\nconst columns: TableColumnsType<DataType> = [\n  {\n    dataIndex: 'title',\n    title: 'Name',\n  },\n  {\n    dataIndex: 'tag',\n    title: 'Tag',\n    render: (tag: string) => (\n      <Tag style={{ marginInlineEnd: 0 }} color=\"cyan\">\n        {tag.toUpperCase()}\n      </Tag>\n    ),\n  },\n  {\n    dataIndex: 'description',\n    title: 'Description',\n  },\n];\n\nconst filterOption = (input: string, item: DataType) =>\n  item.title?.includes(input) || item.tag?.includes(input);\n\nconst App: React.FC = () => {\n  const [targetKeys, setTargetKeys] = useState<TransferProps['targetKeys']>([]);\n  const [disabled, setDisabled] = useState(false);\n\n  const onChange: TableTransferProps['onChange'] = (nextTargetKeys) => {\n    setTargetKeys(nextTargetKeys);\n  };\n\n  const toggleDisabled = (checked: boolean) => {\n    setDisabled(checked);\n  };\n\n  return (\n    <Flex align=\"start\" gap=\"middle\" vertical>\n      <TableTransfer\n        dataSource={mockData}\n        targetKeys={targetKeys}\n        disabled={disabled}\n        showSearch\n        showSelectAll={false}\n        onChange={onChange}\n        filterOption={filterOption}\n        leftColumns={columns}\n        rightColumns={columns}\n      />\n      <Switch\n        unCheckedChildren=\"disabled\"\n        checkedChildren=\"disabled\"\n        checked={disabled}\n        onChange={toggleDisabled}\n      />\n    </Flex>\n  );\n};\n\nexport default App;\n"],"names":[],"mappings":"uOAoIA,+CAAA,4BApIO,oBAAmI,gBACvF,YAoBnD,IAAM,EAA8C,AAAC,IACnD,GAAM,CAAE,YAAA,CAAW,CAAE,aAAA,CAAY,CAAE,GAAG,EAAW,CAAG,EACpD,MACE,UAAC,UAAQ,EAAC,MAAO,CAAE,MAAO,MAAO,EAAI,GAAG,CAAS,UAC9C,CAAC,CACA,UAAA,CAAS,CACT,cAAA,CAAa,CACb,aAAA,CAAY,CACZ,gBAAA,CAAe,CACf,aAAc,CAAgB,CAC9B,SAAU,CAAY,CACvB,IAEC,IAAM,EAAgD,CACpD,iBAAkB,IAAO,CAAA,CAAE,SAAU,CAAa,CAAA,EAClD,SAAS,CAAe,EACtB,EAAgB,EAAiB,WACnC,EACA,gBAAiB,EACjB,WAAY,CAAC,OAAK,CAAC,aAAa,CAAE,OAAK,CAAC,gBAAgB,CAAE,OAAK,CAAC,cAAc,CAAC,AACjF,EAEA,MACE,UAAC,OAAK,EACJ,aAAc,EACd,QAbY,AAAc,SAAd,EAAuB,EAAc,EAcjD,WAAY,EACZ,KAAK,QACL,MAAO,CAAE,cAAe,EAAe,OAAS,KAAA,CAAU,EAC1D,MAAO,CAAC,CAAE,IAAA,CAAG,CAAE,SAAU,CAAY,CAAE,GAAM,CAAA,CAC3C,QAAS,KACH,GAAgB,GAGpB,EAAa,EAAK,CAAC,EAAiB,QAAQ,CAAC,IAC/C,CACF,CAAA,IAGN,IAGN,EAEM,EAAW,CAAC,MAAO,MAAO,OAAO,CAEjC,EAAW,MAAM,IAAI,CAAC,CAAE,OAAQ,EAAG,GAAG,GAAG,CAAW,CAAC,EAAG,IAAO,CAAA,CACnE,IAAK,EAAE,QAAQ,GACf,MAAO,CAAC,OAAO,EAAE,EAAI,EAAE,CAAC,CACxB,YAAa,CAAC,sBAAsB,EAAE,EAAI,EAAE,CAAC,CAC7C,IAAK,CAAQ,CAAC,EAAI,EAAE,AACtB,CAAA,GAEM,EAAsC,CAC1C,CACE,UAAW,QACX,MAAO,MACT,EACA,CACE,UAAW,MACX,MAAO,MACP,OAAQ,AAAC,GACP,UAAC,KAAG,EAAC,MAAO,CAAE,gBAAiB,CAAE,EAAG,MAAM,gBACvC,EAAI,WAAW,IAGtB,EACA,CACE,UAAW,cACX,MAAO,aACT,EACD,CAEK,EAAe,CAAC,EAAe,SACnC,EAA+B,QAA/B,SAAA,EAAA,EAAK,KAAK,YAAV,SAAA,EAAY,QAAQ,CAAC,cAAU,EAAA,EAAK,GAAG,YAAR,SAAA,EAAU,QAAQ,CAAC,UAqCpD,EAnCsB,KACpB,GAAM,CAAC,EAAY,EAAc,CAAG,GAAA,UAAQ,EAA8B,EAAE,EACtE,CAAC,EAAU,EAAY,CAAG,GAAA,UAAQ,EAAC,CAAA,GAUzC,MACE,WAAC,MAAI,EAAC,MAAM,QAAQ,IAAI,SAAS,QAAQ,cACvC,UAAC,GACC,WAAY,EACZ,WAAY,EACZ,SAAU,EACV,UAAU,IACV,cAAe,CAAA,EACf,SAhB2C,AAAC,IAChD,EAAc,GAChB,EAeM,aAAc,EACd,YAAa,EACb,aAAc,IAEhB,UAAC,QAAM,EACL,kBAAkB,WAClB,gBAAgB,WAChB,QAAS,EACT,SArBiB,AAAC,IACtB,EAAY,GACd,OAuBF"}