{"version":3,"sources":["docs/blog/form-names.zh-CN.md?type=text"],"sourcesContent":["\n  import '/home/runner/work/ant-design/ant-design/docs/blog/form-names.zh-CN.md?watch=parent';\n  export const texts = [{\"value\":\"在表单开发过程中，偶尔会遇到组合属性的需求。UI 展示字段与后端返回数据结构字段有所不同。比如说，跟后端对接接口，定义省市字段经常是 2 个字段 \",\"paraId\":0},{\"value\":\"{ province: Beijing, city: Haidian }\",\"paraId\":0},{\"value\":\"，而不是 \",\"paraId\":0},{\"value\":\"{ province:[Beijing，Haidian] }\",\"paraId\":0},{\"value\":\"，因此则需要在 \",\"paraId\":0},{\"value\":\"initialValues\",\"paraId\":0},{\"value\":\" 以及 \",\"paraId\":0},{\"value\":\"onFinish\",\"paraId\":0},{\"value\":\" 处理值，如下：\",\"paraId\":0},{\"value\":\"import React from 'react';\\nimport { Cascader, Form } from 'antd';\\n\\nconst data = { province: 'Beijing', city: 'Haidian' };\\nconst options = [\\n  { value: 'zhejiang', label: 'Zhejiang', children: [{ value: 'hangzhou', label: 'Hangzhou' }] },\\n  { value: 'jiangsu', label: 'Jiangsu', children: [{ value: 'nanjing', label: 'Nanjing' }] },\\n];\\nconst createUser = (values) => console.log(values);\\n\\nconst Demo = () => (\\n  <Form\\n    initialValues={{ province: [data.province, data.city] }}\\n    onFinish={(values) => {\\n      const { province, ...rest } = values;\\n      createUser({ province: province[0], city: province[1], ...rest });\\n    }}\\n  >\\n    <Form.Item label=\\\"Address\\\" name=\\\"province\\\">\\n      <Cascader options={options} placeholder=\\\"Please select\\\" />\\n    </Form.Item>\\n  </Form>\\n);\\nexport default Demo;\\n\",\"paraId\":1},{\"value\":\"当表单比较简单还好，如果遇到 \",\"paraId\":2,\"tocIndex\":0},{\"value\":\"Form.List\",\"paraId\":2,\"tocIndex\":0},{\"value\":\" 场景，就需要 \",\"paraId\":2,\"tocIndex\":0},{\"value\":\"map\",\"paraId\":2,\"tocIndex\":0},{\"value\":\" 处理值，将变的很复杂。于是我们需要封装聚合字段组件，实现一个 \",\"paraId\":2,\"tocIndex\":0},{\"value\":\"Form.Item\",\"paraId\":2,\"tocIndex\":0},{\"value\":\" 可以写多个 \",\"paraId\":2,\"tocIndex\":0},{\"value\":\"name\",\"paraId\":2,\"tocIndex\":0},{\"value\":\"。\",\"paraId\":2,\"tocIndex\":0},{\"value\":\"要实现聚合字段功能，我们需要用到 \",\"paraId\":3,\"tocIndex\":1},{\"value\":\"getValueProps\",\"paraId\":3,\"tocIndex\":1},{\"value\":\" \",\"paraId\":3,\"tocIndex\":1},{\"value\":\"getValueFromEvent\",\"paraId\":3,\"tocIndex\":1},{\"value\":\" \",\"paraId\":3,\"tocIndex\":1},{\"value\":\"transform\",\"paraId\":3,\"tocIndex\":1},{\"value\":\"，从而实现数据从 \",\"paraId\":3,\"tocIndex\":1},{\"value\":\"FormStore\",\"paraId\":3,\"tocIndex\":1},{\"value\":\" 中的转化，以及变更时重新传入 \",\"paraId\":3,\"tocIndex\":1},{\"value\":\"FormStore\",\"paraId\":3,\"tocIndex\":1},{\"value\":\" 结构中。\",\"paraId\":3,\"tocIndex\":1},{\"value\":\"默认情况下，\",\"paraId\":4,\"tocIndex\":2},{\"value\":\"Form.Item\",\"paraId\":4,\"tocIndex\":2},{\"value\":\" 会将 \",\"paraId\":4,\"tocIndex\":2},{\"value\":\"FormStore\",\"paraId\":4,\"tocIndex\":2},{\"value\":\" 中的字段值作为 \",\"paraId\":4,\"tocIndex\":2},{\"value\":\"value\",\"paraId\":4,\"tocIndex\":2},{\"value\":\" prop 传递给子组件。而通过 \",\"paraId\":4,\"tocIndex\":2},{\"value\":\"getValueProps\",\"paraId\":4,\"tocIndex\":2},{\"value\":\" 可以自定义传入给子组件的 \",\"paraId\":4,\"tocIndex\":2},{\"value\":\"props\",\"paraId\":4,\"tocIndex\":2},{\"value\":\" 从而实现转化功能。在聚合场景中，我们可以遍历 \",\"paraId\":4,\"tocIndex\":2},{\"value\":\"names\",\"paraId\":4,\"tocIndex\":2},{\"value\":\" 分别将 \",\"paraId\":4,\"tocIndex\":2},{\"value\":\"FormStore\",\"paraId\":4,\"tocIndex\":2},{\"value\":\" 中的值组合为一个 \",\"paraId\":4,\"tocIndex\":2},{\"value\":\"value\",\"paraId\":4,\"tocIndex\":2},{\"value\":\" 传递给子组件：\",\"paraId\":4,\"tocIndex\":2},{\"value\":\"getValueProps={() => ({ value: names.map((name) => form.getFieldValue(name)) })}\\n\",\"paraId\":5,\"tocIndex\":2},{\"value\":\"当子组件修改值时，使用 \",\"paraId\":6,\"tocIndex\":3},{\"value\":\"setFields\",\"paraId\":6,\"tocIndex\":3},{\"value\":\" 方法将子组件返回的聚合 \",\"paraId\":6,\"tocIndex\":3},{\"value\":\"value\",\"paraId\":6,\"tocIndex\":3},{\"value\":\" 分别设置给对应的 \",\"paraId\":6,\"tocIndex\":3},{\"value\":\"name\",\"paraId\":6,\"tocIndex\":3},{\"value\":\"，从而实现更新 \",\"paraId\":6,\"tocIndex\":3},{\"value\":\"FormStore\",\"paraId\":6,\"tocIndex\":3},{\"value\":\" 中 \",\"paraId\":6,\"tocIndex\":3},{\"value\":\"names\",\"paraId\":6,\"tocIndex\":3},{\"value\":\" 的值：\",\"paraId\":6,\"tocIndex\":3},{\"value\":\"getValueFromEvent={(values) => {\\n    form.setFields(names.map((name, index) => ({ name, value: values[index] })));\\n    return values[0];\\n}}\\n\",\"paraId\":7,\"tocIndex\":3},{\"value\":\"rules\",\"paraId\":8,\"tocIndex\":4},{\"value\":\" 中校验默认提供的 \",\"paraId\":8,\"tocIndex\":4},{\"value\":\"value\",\"paraId\":8,\"tocIndex\":4},{\"value\":\" 来源于子组件变更时传递给 \",\"paraId\":8,\"tocIndex\":4},{\"value\":\"name\",\"paraId\":8,\"tocIndex\":4},{\"value\":\" 对应的值，还需要从 \",\"paraId\":8,\"tocIndex\":4},{\"value\":\"FormStore\",\"paraId\":8,\"tocIndex\":4},{\"value\":\" 获取 \",\"paraId\":8,\"tocIndex\":4},{\"value\":\"names\",\"paraId\":8,\"tocIndex\":4},{\"value\":\" 的值使用 \",\"paraId\":8,\"tocIndex\":4},{\"value\":\"transform\",\"paraId\":8,\"tocIndex\":4},{\"value\":\" 方法修改 \",\"paraId\":8,\"tocIndex\":4},{\"value\":\"rules\",\"paraId\":8,\"tocIndex\":4},{\"value\":\" 的 \",\"paraId\":8,\"tocIndex\":4},{\"value\":\"value\",\"paraId\":8,\"tocIndex\":4},{\"value\":\"：\",\"paraId\":8,\"tocIndex\":4},{\"value\":\"rules={[{\\n  transform: () => {\\n    const values = names.map((name) => form.getFieldValue(name));\\n    return values;\\n  },\\n}]}\\n\",\"paraId\":9,\"tocIndex\":4},{\"value\":\"通过这种方式，我们实现了一个可以在 \",\"paraId\":10,\"tocIndex\":6},{\"value\":\"Form.Item\",\"paraId\":10,\"tocIndex\":6},{\"value\":\" 中操作多个 \",\"paraId\":10,\"tocIndex\":6},{\"value\":\"name\",\"paraId\":10,\"tocIndex\":6},{\"value\":\" 的功能，使得表单逻辑更加清晰和易于维护。\",\"paraId\":10,\"tocIndex\":6},{\"value\":\"除了文中的 \",\"paraId\":11,\"tocIndex\":6},{\"value\":\"Cascader\",\"paraId\":11,\"tocIndex\":6},{\"value\":\" 示例，同样适用于 \",\"paraId\":11,\"tocIndex\":6},{\"value\":\"DatePicker.RangePicker\",\"paraId\":11,\"tocIndex\":6},{\"value\":\" 等组件。换句话说，只要是需要聚合多个字段的场景，都可以使用这种方式。\",\"paraId\":11,\"tocIndex\":6},{\"value\":\"另外此示例还有些边界场景没有考虑，比如 \",\"paraId\":12,\"tocIndex\":6},{\"value\":\"setFields([{ name:'city' value:'nanjing' }])\",\"paraId\":12,\"tocIndex\":6},{\"value\":\" 不会更新 \",\"paraId\":12,\"tocIndex\":6},{\"value\":\"Cascader\",\"paraId\":12,\"tocIndex\":6},{\"value\":\" 选中的值，需要增加 \",\"paraId\":12,\"tocIndex\":6},{\"value\":\"Form.useWatch(values => resetNames.map(name => get(values, name)), form);\",\"paraId\":12,\"tocIndex\":6},{\"value\":\" 达到刷新效果等。\",\"paraId\":12,\"tocIndex\":6},{\"value\":\"更多的边界问题就交给你去试试吧~\",\"paraId\":13,\"tocIndex\":6}];\n  "],"names":[],"mappings":"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"}