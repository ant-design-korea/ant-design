{"version":3,"sources":["components/tag/demo/control.tsx?techStack=react"],"sourcesContent":["import '/home/runner/work/ant-design/ant-design/components/tag/demo/control.tsx?watch=parent';import React, { useEffect, useRef, useState } from 'react';\nimport { PlusOutlined } from '@ant-design/icons';\nimport type { InputRef } from 'antd';\nimport { Flex, Input, Tag, theme, Tooltip } from 'antd';\n\nconst tagInputStyle: React.CSSProperties = {\n  width: 64,\n  height: 22,\n  marginInlineEnd: 8,\n  verticalAlign: 'top',\n};\n\nconst App: React.FC = () => {\n  const { token } = theme.useToken();\n  const [tags, setTags] = useState<string[]>(['Unremovable', 'Tag 2', 'Tag 3']);\n  const [inputVisible, setInputVisible] = useState(false);\n  const [inputValue, setInputValue] = useState('');\n  const [editInputIndex, setEditInputIndex] = useState(-1);\n  const [editInputValue, setEditInputValue] = useState('');\n  const inputRef = useRef<InputRef>(null);\n  const editInputRef = useRef<InputRef>(null);\n\n  useEffect(() => {\n    if (inputVisible) {\n      inputRef.current?.focus();\n    }\n  }, [inputVisible]);\n\n  useEffect(() => {\n    editInputRef.current?.focus();\n  }, [editInputValue]);\n\n  const handleClose = (removedTag: string) => {\n    const newTags = tags.filter((tag) => tag !== removedTag);\n    console.log(newTags);\n    setTags(newTags);\n  };\n\n  const showInput = () => {\n    setInputVisible(true);\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleInputConfirm = () => {\n    if (inputValue && !tags.includes(inputValue)) {\n      setTags([...tags, inputValue]);\n    }\n    setInputVisible(false);\n    setInputValue('');\n  };\n\n  const handleEditInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setEditInputValue(e.target.value);\n  };\n\n  const handleEditInputConfirm = () => {\n    const newTags = [...tags];\n    newTags[editInputIndex] = editInputValue;\n    setTags(newTags);\n    setEditInputIndex(-1);\n    setEditInputValue('');\n  };\n\n  const tagPlusStyle: React.CSSProperties = {\n    height: 22,\n    background: token.colorBgContainer,\n    borderStyle: 'dashed',\n  };\n\n  return (\n    <Flex gap=\"4px 0\" wrap>\n      {tags.map<React.ReactNode>((tag, index) => {\n        if (editInputIndex === index) {\n          return (\n            <Input\n              ref={editInputRef}\n              key={tag}\n              size=\"small\"\n              style={tagInputStyle}\n              value={editInputValue}\n              onChange={handleEditInputChange}\n              onBlur={handleEditInputConfirm}\n              onPressEnter={handleEditInputConfirm}\n            />\n          );\n        }\n        const isLongTag = tag.length > 20;\n        const tagElem = (\n          <Tag\n            key={tag}\n            closable={index !== 0}\n            style={{ userSelect: 'none' }}\n            onClose={() => handleClose(tag)}\n          >\n            <span\n              onDoubleClick={(e) => {\n                if (index !== 0) {\n                  setEditInputIndex(index);\n                  setEditInputValue(tag);\n                  e.preventDefault();\n                }\n              }}\n            >\n              {isLongTag ? `${tag.slice(0, 20)}...` : tag}\n            </span>\n          </Tag>\n        );\n        return isLongTag ? (\n          <Tooltip title={tag} key={tag}>\n            {tagElem}\n          </Tooltip>\n        ) : (\n          tagElem\n        );\n      })}\n      {inputVisible ? (\n        <Input\n          ref={inputRef}\n          type=\"text\"\n          size=\"small\"\n          style={tagInputStyle}\n          value={inputValue}\n          onChange={handleInputChange}\n          onBlur={handleInputConfirm}\n          onPressEnter={handleInputConfirm}\n        />\n      ) : (\n        <Tag style={tagPlusStyle} icon={<PlusOutlined />} onClick={showInput}>\n          New Tag\n        </Tag>\n      )}\n    </Flex>\n  );\n};\n\nexport default App;\n"],"names":[],"mappings":"uOA0IA,+CAAA,4BA1IO,oBAA0I,gBACpH,gBAEoB,YAEjD,IAAM,EAAqC,CACzC,MAAO,GACP,OAAQ,GACR,gBAAiB,EACjB,cAAe,KACjB,MAgIA,EA9HsB,KACpB,GAAM,CAAE,MAAA,CAAK,CAAE,CAAG,OAAK,CAAC,QAAQ,GAC1B,CAAC,EAAM,EAAQ,CAAG,GAAA,UAAQ,EAAW,CAAC,cAAe,QAAS,QAAQ,EACtE,CAAC,EAAc,EAAgB,CAAG,GAAA,UAAQ,EAAC,CAAA,GAC3C,CAAC,EAAY,EAAc,CAAG,GAAA,UAAQ,EAAC,IACvC,CAAC,EAAgB,EAAkB,CAAG,GAAA,UAAQ,EAAC,IAC/C,CAAC,EAAgB,EAAkB,CAAG,GAAA,UAAQ,EAAC,IAC/C,EAAW,GAAA,QAAM,EAAW,MAC5B,EAAe,GAAA,QAAM,EAAW,MAEtC,GAAA,WAAS,EAAC,KACR,GAAI,EAAc,KAChB,UAAA,EAAA,EAAS,OAAO,YAAhB,GAAA,EAAkB,KAAK,GACzB,CACF,EAAG,CAAC,EAAa,EAEjB,GAAA,WAAS,EAAC,SACR,UAAA,EAAA,EAAa,OAAO,YAApB,GAAA,EAAsB,KAAK,GAC7B,EAAG,CAAC,EAAe,EAEnB,IAAM,EAAc,AAAC,IACnB,IAAM,EAAU,EAAK,MAAM,CAAC,AAAC,GAAQ,IAAQ,GAC7C,QAAQ,GAAG,CAAC,GACZ,EAAQ,GACV,EAUM,EAAqB,KACrB,GAAc,CAAC,EAAK,QAAQ,CAAC,IAC/B,EAAQ,IAAI,EAAM,EAAW,EAE/B,EAAgB,CAAA,GAChB,EAAc,IAChB,EAEM,EAAwB,AAAC,IAC7B,EAAkB,EAAE,MAAM,CAAC,KAAK,EAClC,EAEM,EAAyB,KAC7B,IAAM,EAAU,IAAI,EAAK,CACzB,CAAO,CAAC,EAAe,CAAG,EAC1B,EAAQ,GACR,EAAkB,IAClB,EAAkB,IACpB,EAEM,EAAoC,CACxC,OAAQ,GACR,WAAY,EAAM,gBAAgB,CAClC,YAAa,QACf,EAEA,MACE,WAAC,MAAI,EAAC,IAAI,QAAQ,IAAI,cACnB,EAAK,GAAG,CAAkB,CAAC,EAAK,KAC/B,GAAI,IAAmB,EACrB,MACE,UAAC,OAAK,EACJ,IAAK,EAEL,KAAK,QACL,MAAO,EACP,MAAO,EACP,SAAU,EACV,OAAQ,EACR,aAAc,GANT,GAUX,IAAM,EAAY,EAAI,MAAM,CAAG,GACzB,EACJ,UAAC,KAAG,EAEF,SAAU,AAAU,IAAV,EACV,MAAO,CAAE,WAAY,MAAO,EAC5B,QAAS,IAAM,EAAY,YAE3B,UAAC,QACC,cAAe,AAAC,IACA,IAAV,IACF,EAAkB,GAClB,EAAkB,GAClB,EAAE,cAAc,IAEpB,WAEC,EAAY,CAAC,EAAE,EAAI,KAAK,CAAC,EAAG,IAAI,GAAG,CAAC,CAAG,KAdrC,GAkBT,OAAO,EACL,UAAC,SAAO,EAAC,MAAO,WACb,GADuB,GAI1B,EAEJ,GACC,EACC,UAAC,OAAK,EACJ,IAAK,EACL,KAAK,OACL,KAAK,QACL,MAAO,EACP,MAAO,EACP,SAnFkB,AAAC,IACzB,EAAc,EAAE,MAAM,CAAC,KAAK,EAC9B,EAkFQ,OAAQ,EACR,aAAc,IAGhB,UAAC,KAAG,EAAC,MAAO,EAAc,KAAM,UAAC,cAAY,KAAK,QA5FtC,KAChB,EAAgB,CAAA,GAClB,WA0F4E,eAM9E"}