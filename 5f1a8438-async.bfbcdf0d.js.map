{"version":3,"sources":["docs/blog/historical-debt.zh-CN.md?type=text"],"sourcesContent":["\n  import '/home/runner/work/ant-design/ant-design/docs/blog/historical-debt.zh-CN.md?watch=parent';\n  export const texts = [{\"value\":\"在升级 Ant Design 的过程中，你或许收到过这种警告：\",\"paraId\":0},{\"value\":\"Warning: [antd: XXX] `old prop` is deprecated. Please use `new prop` instead.\\n\",\"paraId\":1},{\"value\":\"这是因为 antd 在开发过程中，有一些 API 设计的不合理导致的历史债务。举个例子，在 antd v3 及以前，TreeSelect 的代码是从 Select 中直接复制出来并在此基础上做的拓展。他们的搜索样式存在差异：\",\"paraId\":2},{\"value\":\"而后的维护过程中，开发者希望可以受控控制搜索框的内容。而不巧的是，这个需求是不同的机缘巧合被提出并由不同的开发者贡献了代码。于是两者添加了不同的属性，一个叫做 \",\"paraId\":3},{\"value\":\"inputValue\",\"paraId\":3},{\"value\":\" 而另一个叫做 \",\"paraId\":3},{\"value\":\"searchValue\",\"paraId\":3},{\"value\":\"：\",\"paraId\":3},{\"value\":\"// Select 在 combobox 模式下，搜索框就是输入框，`inputValue` 看起来很合理\\n<Select inputValue=\\\"search\\\" />\\n\\n// TreeSelect 的搜索框在弹出层，`searchValue` 也很合理\\n<TreeSelect searchValue=\\\"search\\\" />\\n\",\"paraId\":4},{\"value\":\"在多选模式下，类 Select 组件在选择内容后会清除搜索框内容。但是有些场景下，开发者希望能够保留。因而 TreeSelect 和 Select 又添加了 \",\"paraId\":5},{\"value\":\"autoClearSearchValue\",\"paraId\":5},{\"value\":\" 属性。\",\"paraId\":5},{\"value\":\"等等，Select 明明叫 \",\"paraId\":6},{\"value\":\"inputValue\",\"paraId\":6},{\"value\":\"，为什么要叫 \",\"paraId\":6},{\"value\":\"autoClearSearchValue\",\"paraId\":6},{\"value\":\"？明显应该叫做 \",\"paraId\":6},{\"value\":\"autoClearInputValue\",\"paraId\":6},{\"value\":\" 呐。如果我们在现有的 API 上继续生长其他的同类 API 风格。你会发现组件的 prop 变得越来越分裂。这也会导致代码维护出现坏味道。例如上面这个例子，在之后我们对类 Select 组件抽成了统一的 UI 层并将其合并到 \",\"paraId\":6},{\"value\":\"rc-select\",\"paraId\":6},{\"value\":\" 组件中。\",\"paraId\":6},{\"value\":\"rc-tree-select\",\"paraId\":6},{\"value\":\" 只需要实现弹出层的内容，而输入框的结构和样式可以和 Select 完全复用。但是由于两者的 API 不一致，导致我们需要额外的处理，所以我们在迭代过程中需要对这些 API 债务进行重构并将其统一起来。（在 v4 中，我们将其合并为了 \",\"paraId\":6},{\"value\":\"searchValue\",\"paraId\":6},{\"value\":\" 并且对设计也进行了统一）\",\"paraId\":6},{\"value\":\"然而世上没有银弹，我们无法在一开始就设计出完美的 API。有一些 API 在设计之初显得非常合理，而随着迭代又会发现或多或少不合时宜。比如说弹出层早期起名为 dropdown，这对应了 Dropdown 以及类 Select 组件的弹出内容。但是对于 Tooltip 而言，dropdown 显然是不适合的。从统一的角度看，popup 会更适合。\",\"paraId\":7},{\"value\":\"在维护过程中，我们逐渐统一了 API 命名规范（\",\"paraId\":8,\"tocIndex\":0},{\"value\":\"API Naming rules\",\"paraId\":8,\"tocIndex\":0},{\"value\":\"）。在添加新的 feature 时，优先从现存的 API 中寻找接近。对于现存的 API，逐步添加废弃警告。为了保持兼容，我们的策略是每个版本提供的废弃警告会继续兼容一个大版本，而在下下个大版本中移除它。例如在 v4 中添加了废弃警告，那么在 v5 中仍然可以使用，但是在 v6 中将会被移除。以此确保开发者有足够的时间进行迁移。\",\"paraId\":8,\"tocIndex\":0},{\"value\":\"但是从开发者角度看，这也并不合理。开发者本身只是对 antd 进行了升级，却要因为组件库 API 设计的失误而遭受 console 的侵扰。如果在废弃警告中混入几个使用警告，开发者往往很难发现它们。这种情况在大版本升级中尤为显著，业务可能并没有给你足够的时间去做升级迁移，因而不得不使用兼容包以及其他的一些技术手段让它先跑起来。而对于冗长的废弃警告，开发者不得不选择暂时（或者永远）无视它们。针对这种情况，使用警告会更为重要，因而我们提出了 \",\"paraId\":9,\"tocIndex\":0},{\"value\":\"Warning Filter RFC\",\"paraId\":9,\"tocIndex\":0},{\"value\":\"。\",\"paraId\":9,\"tocIndex\":0},{\"value\":\"通过 ConfigProvider 的 \",\"paraId\":10,\"tocIndex\":1},{\"value\":\"warning\",\"paraId\":10,\"tocIndex\":1},{\"value\":\" 属性，可以将废弃信息进行聚合：\",\"paraId\":10,\"tocIndex\":1},{\"value\":\"<ConfigProvider warning={{ strict: false }} />\\n\",\"paraId\":11,\"tocIndex\":1},{\"value\":\"聚合后，原本打平的废弃信息会合并为一个数组在 console 中展示。而对于使用警告则不会影响：\",\"paraId\":12,\"tocIndex\":1},{\"value\":\"如上所述，API 设计不存在银弹。为了防止 breaking change，我们一般不会改动现有的 API 实现。但是对于一些约定的内容，这就会造成麻烦。比如说 \",\"paraId\":13,\"tocIndex\":2},{\"value\":\"ref\",\"paraId\":13,\"tocIndex\":2},{\"value\":\" 组件是很典型的约定，只要是 React 的开发者就能明白，通过 \",\"paraId\":13,\"tocIndex\":2},{\"value\":\"ref\",\"paraId\":13,\"tocIndex\":2},{\"value\":\" 可以获取 DOM 节点以及做一些诸如 \",\"paraId\":13,\"tocIndex\":2},{\"value\":\"focus\",\"paraId\":13,\"tocIndex\":2},{\"value\":\" 的基本操作。但是对于复合组件而言，调用方法和 DOM 不一定能够统一。比如说 Table 组件的 \",\"paraId\":13,\"tocIndex\":2},{\"value\":\"ref\",\"paraId\":13,\"tocIndex\":2},{\"value\":\" 显然应该是最外层的 div，但是对于 \",\"paraId\":13,\"tocIndex\":2},{\"value\":\"scrollTo\",\"paraId\":13,\"tocIndex\":2},{\"value\":\" 方法则应该对应到滚动容器上（如果是 VirtualTable 则应该交由内部的 \",\"paraId\":13,\"tocIndex\":2},{\"value\":\"rc-virtual-list\",\"paraId\":13,\"tocIndex\":2},{\"value\":\" 进行处理）。在 antd mobile 中 \",\"paraId\":13,\"tocIndex\":2},{\"value\":\"ref\",\"paraId\":13,\"tocIndex\":2},{\"value\":\" 被设计为复合结构，DOM 节点总是通过 \",\"paraId\":13,\"tocIndex\":2},{\"value\":\"nativeElement\",\"paraId\":13,\"tocIndex\":2},{\"value\":\" 返回：\",\"paraId\":13,\"tocIndex\":2},{\"value\":\"export interface SampleRef {\\n  nativeElement: HTMLElement;\\n  focus(): void;\\n  blur(): void;\\n}\\n\",\"paraId\":14,\"tocIndex\":2},{\"value\":\"而在 antd 中，由于我们早期没有对 \",\"paraId\":15,\"tocIndex\":2},{\"value\":\"ref\",\"paraId\":15,\"tocIndex\":2},{\"value\":\" 进行约定，导致在实现方法是就遇到了难题。不过好在有 Proxy 支持，我们可以通过 Proxy 对 \",\"paraId\":15,\"tocIndex\":2},{\"value\":\"ref\",\"paraId\":15,\"tocIndex\":2},{\"value\":\" 进行拦截并返回我们想要的结果：\",\"paraId\":15,\"tocIndex\":2},{\"value\":\"useImperativeHandle(\\n  ref,\\n  () =>\\n    new Proxy(divRef.current, {\\n      get(target, key) {\\n        // ...\\n      },\\n    }),\\n);\\n\",\"paraId\":16,\"tocIndex\":2},{\"value\":\"通过这种方式，我们可以继续兼容之前的使用。它仍然是一个 DOM 节点，但是同样也支持了 SampleRef 的定义调用。\",\"paraId\":17,\"tocIndex\":2},{\"value\":\"API 设计是个难题，随着技术栈以及组件本身的迭代。一些设计会逐渐腐朽，而 API 升级本身对于开发者也是痛苦的。我们希望通过这篇文章，让开发者能够理解我们的设计思路以及在升级过程中的一些问题。如果你有任何的建议或者想法，欢迎在 GitHub 中讨论。\",\"paraId\":18,\"tocIndex\":3}];\n  "],"names":[],"mappings":"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"}