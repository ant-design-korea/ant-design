{"version":3,"sources":["components/tabs/demo/custom-tab-bar-node.tsx?techStack=react"],"sourcesContent":["import '/home/runner/work/ant-design/ant-design/components/tabs/demo/custom-tab-bar-node.tsx?watch=parent';import React, { useState } from 'react';\nimport type { DragEndEvent } from '@dnd-kit/core';\nimport { DndContext, PointerSensor, closestCenter, useSensor } from '@dnd-kit/core';\nimport {\n  arrayMove,\n  horizontalListSortingStrategy,\n  SortableContext,\n  useSortable,\n} from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport { Tabs } from 'antd';\n\ninterface DraggableTabPaneProps extends React.HTMLAttributes<HTMLDivElement> {\n  'data-node-key': string;\n}\n\nconst DraggableTabNode = ({ className, ...props }: DraggableTabPaneProps) => {\n  const { attributes, listeners, setNodeRef, transform, transition } = useSortable({\n    id: props['data-node-key'],\n  });\n\n  const style: React.CSSProperties = {\n    ...props.style,\n    transform: CSS.Translate.toString(transform),\n    transition,\n    cursor: 'move',\n  };\n\n  return React.cloneElement(props.children as React.ReactElement, {\n    ref: setNodeRef,\n    style,\n    ...attributes,\n    ...listeners,\n  });\n};\n\nconst App: React.FC = () => {\n  const [items, setItems] = useState([\n    {\n      key: '1',\n      label: 'Tab 1',\n      children: 'Content of Tab Pane 1',\n    },\n    {\n      key: '2',\n      label: 'Tab 2',\n      children: 'Content of Tab Pane 2',\n    },\n    {\n      key: '3',\n      label: 'Tab 3',\n      children: 'Content of Tab Pane 3',\n    },\n  ]);\n\n  const sensor = useSensor(PointerSensor, { activationConstraint: { distance: 10 } });\n\n  const onDragEnd = ({ active, over }: DragEndEvent) => {\n    if (active.id !== over?.id) {\n      setItems((prev) => {\n        const activeIndex = prev.findIndex((i) => i.key === active.id);\n        const overIndex = prev.findIndex((i) => i.key === over?.id);\n        return arrayMove(prev, activeIndex, overIndex);\n      });\n    }\n  };\n\n  return (\n    <Tabs\n      items={items}\n      renderTabBar={(tabBarProps, DefaultTabBar) => (\n        <DndContext sensors={[sensor]} onDragEnd={onDragEnd} collisionDetection={closestCenter}>\n          <SortableContext items={items.map((i) => i.key)} strategy={horizontalListSortingStrategy}>\n            <DefaultTabBar {...tabBarProps}>\n              {(node) => (\n                <DraggableTabNode {...node.props} key={node.key}>\n                  {node}\n                </DraggableTabNode>\n              )}\n            </DefaultTabBar>\n          </SortableContext>\n        </DndContext>\n      )}\n    />\n  );\n};\n\nexport default App;\n"],"names":[],"mappings":"qOAuFA,+CAAA,kDAvF2I,eAApI,oBAE6D,gBAM7D,gBACa,gBACC,YAMrB,IAAM,EAAmB,CAAC,CAAE,UAAA,CAAS,CAAE,GAAG,EAA8B,IACtE,GAAM,CAAE,WAAA,CAAU,CAAE,UAAA,CAAS,CAAE,WAAA,CAAU,CAAE,UAAA,CAAS,CAAE,WAAA,CAAU,CAAE,CAAG,GAAA,aAAW,EAAC,CAC/E,GAAI,CAAK,CAAC,gBAAgB,AAC5B,GAEM,EAA6B,CACjC,GAAG,EAAM,KAAK,CACd,UAAW,KAAG,CAAC,SAAS,CAAC,QAAQ,CAAC,GAClC,WAAA,EACA,OAAQ,MACV,EAEA,OAAO,SAAK,CAAC,YAAY,CAAC,EAAM,QAAQ,CAAwB,CAC9D,IAAK,EACL,MAAA,EACA,GAAG,CAAU,CACb,GAAG,CAAS,AACd,GACF,MAqDA,EAnDsB,KACpB,GAAM,CAAC,EAAO,EAAS,CAAG,GAAA,UAAQ,EAAC,CACjC,CACE,IAAK,IACL,MAAO,QACP,SAAU,uBACZ,EACA,CACE,IAAK,IACL,MAAO,QACP,SAAU,uBACZ,EACA,CACE,IAAK,IACL,MAAO,QACP,SAAU,uBACZ,EACD,EAEK,EAAS,GAAA,WAAS,EAAC,eAAa,CAAE,CAAE,qBAAsB,CAAE,SAAU,EAAG,CAAE,GAE3E,EAAY,CAAC,CAAE,OAAA,CAAM,CAAE,KAAA,CAAI,CAAgB,IAC3C,EAAO,EAAE,UAAK,SAAA,EAAM,EAAE,GACxB,EAAS,AAAC,IACR,IAAM,EAAc,EAAK,SAAS,CAAC,AAAC,GAAM,EAAE,GAAG,GAAK,EAAO,EAAE,EACvD,EAAY,EAAK,SAAS,CAAC,AAAC,GAAM,EAAE,GAAG,UAAK,SAAA,EAAM,EAAE,GAC1D,MAAO,GAAA,WAAS,EAAC,EAAM,EAAa,GACtC,GAEJ,EAEA,MACE,UAAC,MAAI,EACH,MAAO,EACP,aAAc,CAAC,EAAa,IAC1B,UAAC,YAAU,EAAC,QAAS,CAAC,EAAO,CAAE,UAAW,EAAW,mBAAoB,eAAa,UACpF,UAAC,iBAAe,EAAC,MAAO,EAAM,GAAG,CAAC,AAAC,GAAM,EAAE,GAAG,EAAG,SAAU,+BAA6B,UACtF,UAAC,GAAe,GAAG,CAAW,UAC3B,AAAC,GACA,oBAAC,GAAkB,GAAG,EAAK,KAAK,CAAE,IAAK,EAAK,GAAG,EAC5C,WASnB"}