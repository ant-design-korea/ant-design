{"version":3,"sources":["docs/blog/check-conduct.zh-CN.md?type=text"],"sourcesContent":["\n  import '/home/runner/work/ant-design/ant-design/docs/blog/check-conduct.zh-CN.md?watch=parent';\n  export const texts = [{\"value\":\"在 Tree 组件以及类似的组件（如 TreeSelect、Cascader），都会需要勾选功能。在大部分情况下它都没有歧义，但是当中间的某个节点出现 \",\"paraId\":0},{\"value\":\"disabled\",\"paraId\":0},{\"value\":\" 节点时，这就值得讨论了。这篇文章会介绍 antd 中，勾选传导的逻辑。需要注意的是，在不同的场景下，会有各种不同的需求，antd 选择了其中最常用的一种勾选传导逻辑。如果你需要不同的定制款，可以通过 \",\"paraId\":0},{\"value\":\"checkStrictly\",\"paraId\":0},{\"value\":\" 来自行实现。\",\"paraId\":0},{\"value\":\"在开始之前，我们先确定一个共识。那就是当一个节点被 \",\"paraId\":1,\"tocIndex\":0},{\"value\":\"disabled\",\"paraId\":1,\"tocIndex\":0},{\"value\":\" 后，它是不能被点击 \",\"paraId\":1,\"tocIndex\":0},{\"value\":\"checked\",\"paraId\":1,\"tocIndex\":0},{\"value\":\" 的。接着我们以如下 Tree 结构做示例：\",\"paraId\":1,\"tocIndex\":0},{\"value\":\"接下来我们勾选根节点 \",\"paraId\":2,\"tocIndex\":0},{\"value\":\"parent 1\",\"paraId\":2,\"tocIndex\":0},{\"value\":\"，并分析一下不同的勾选传导策略的异同。\",\"paraId\":2,\"tocIndex\":0},{\"value\":\"这是最直观的一种策略，所有的节点都会被勾选：\",\"paraId\":3,\"tocIndex\":1},{\"value\":\"你立刻就会发现这种策略的问题所在，我们前面提到过 \",\"paraId\":4,\"tocIndex\":1},{\"value\":\"disabled\",\"paraId\":4,\"tocIndex\":1},{\"value\":\" 节点不允许被 \",\"paraId\":4,\"tocIndex\":1},{\"value\":\"checked\",\"paraId\":4,\"tocIndex\":1},{\"value\":\"。但是当父节点不是 \",\"paraId\":4,\"tocIndex\":1},{\"value\":\"disabled\",\"paraId\":4,\"tocIndex\":1},{\"value\":\" 时，它的子节点会被强制勾选。这样就会导致 \",\"paraId\":4,\"tocIndex\":1},{\"value\":\"disabled\",\"paraId\":4,\"tocIndex\":1},{\"value\":\" 节点“可以”被勾选，显然不合理。\",\"paraId\":4,\"tocIndex\":1},{\"value\":\"从勾选交互看，它看起来不错，但是并不符合直觉。\",\"paraId\":5,\"tocIndex\":2},{\"value\":\"parent 1\",\"paraId\":5,\"tocIndex\":2},{\"value\":\" 勾选后，\",\"paraId\":5,\"tocIndex\":2},{\"value\":\"leaf 2\",\"paraId\":5,\"tocIndex\":2},{\"value\":\" 被传导勾选。但是其中间节点 \",\"paraId\":5,\"tocIndex\":2},{\"value\":\"parent 1-0\",\"paraId\":5,\"tocIndex\":2},{\"value\":\" 却没有勾选。在一些足够深的层级下，这种策略会导致用户并不知道勾选被传导出去了：\",\"paraId\":5,\"tocIndex\":2},{\"value\":\"没有滚动时，用户并不能意识到上层 \",\"paraId\":6,\"tocIndex\":2},{\"value\":\"disabled\",\"paraId\":6,\"tocIndex\":2},{\"value\":\" 都没有被勾选时，而最上面被勾选了：\",\"paraId\":6,\"tocIndex\":2},{\"value\":\"这也是 antd 现在的策略，当节点被勾选时，它会从节点起向上向下传导，直到 \",\"paraId\":7,\"tocIndex\":3},{\"value\":\"disabled\",\"paraId\":7,\"tocIndex\":3},{\"value\":\" 停止。节点中存在多个 \",\"paraId\":7,\"tocIndex\":3},{\"value\":\"disabled\",\"paraId\":7,\"tocIndex\":3},{\"value\":\" 时会各自进行勾选状态管理：\",\"paraId\":7,\"tocIndex\":3},{\"value\":\"反过来勾选 \",\"paraId\":8,\"tocIndex\":3},{\"value\":\"leaf 2\",\"paraId\":8,\"tocIndex\":3},{\"value\":\"，也不会传导：\",\"paraId\":8,\"tocIndex\":3},{\"value\":\"这种策略的好处是，用户可以清晰的看到勾选的传导过程。相对于上一个策略，在滚动场景用户只需要很小的区域就能理解勾选逻辑。\",\"paraId\":9,\"tocIndex\":3},{\"value\":\"注：我们此处只做简单的传导逻辑介绍，具体应用请参考 \",\"paraId\":10,\"tocIndex\":4},{\"value\":\"实际代码\",\"paraId\":10,\"tocIndex\":4},{\"value\":\"。其中还会做一些性能优化，比如通过缓存机制跳过已经被遍历过的节点。\",\"paraId\":10,\"tocIndex\":4},{\"value\":\"当勾选节点后，我们会将 \",\"paraId\":11,\"tocIndex\":5},{\"value\":\"key\",\"paraId\":11,\"tocIndex\":5},{\"value\":\" 加入到 \",\"paraId\":11,\"tocIndex\":5},{\"value\":\"checkedKeys\",\"paraId\":11,\"tocIndex\":5},{\"value\":\" 中。我们会遍历新的 \",\"paraId\":11,\"tocIndex\":5},{\"value\":\"checkedKeys\",\"paraId\":11,\"tocIndex\":5},{\"value\":\" 中的每个 \",\"paraId\":11,\"tocIndex\":5},{\"value\":\"key\",\"paraId\":11,\"tocIndex\":5},{\"value\":\" 进行传导检查。第一步会自上而下进行传导（下图示例我们勾选 \",\"paraId\":11,\"tocIndex\":5},{\"value\":\"0-0\",\"paraId\":11,\"tocIndex\":5},{\"value\":\"）：\",\"paraId\":11,\"tocIndex\":5},{\"value\":\"我们将当前节点 \",\"paraId\":12,\"tocIndex\":5},{\"value\":\"0-0\",\"paraId\":12,\"tocIndex\":5},{\"value\":\" 和被传导的 \",\"paraId\":12,\"tocIndex\":5},{\"value\":\"0-0-0\",\"paraId\":12,\"tocIndex\":5},{\"value\":\"与 \",\"paraId\":12,\"tocIndex\":5},{\"value\":\"0-0-1\",\"paraId\":12,\"tocIndex\":5},{\"value\":\" 记录下来：\",\"paraId\":12,\"tocIndex\":5},{\"value\":\"第二步，我们会从该节点向上传导：\",\"paraId\":13,\"tocIndex\":5},{\"value\":\"同样的，将被传导的节点 \",\"paraId\":14,\"tocIndex\":5},{\"value\":\"0\",\"paraId\":14,\"tocIndex\":5},{\"value\":\" 记录下来：\",\"paraId\":14,\"tocIndex\":5},{\"value\":\"当父节点被传导勾选时，该父节点的父节点勾选也可能会被传导，所以我们需要继续向上传导，直到 根节点 或者 \",\"paraId\":15,\"tocIndex\":5},{\"value\":\"disabled\",\"paraId\":15,\"tocIndex\":5},{\"value\":\" 节点为止。\",\"paraId\":15,\"tocIndex\":5},{\"value\":\"同上，我们一样会向上、向下进行传导遍历，然后将传导的节点从 \",\"paraId\":16,\"tocIndex\":6},{\"value\":\"checkedKeys\",\"paraId\":16,\"tocIndex\":6},{\"value\":\" 中移除。因此不再复述。\",\"paraId\":16,\"tocIndex\":6},{\"value\":\"在 v3 早期以前，我们遇到关于 Tree 的 \",\"paraId\":17,\"tocIndex\":7},{\"value\":\"disabled\",\"paraId\":17,\"tocIndex\":7},{\"value\":\" 勾选在不同的场景会有不同的诉求（而在零散的查看诉求时每个都“很合理”），而当抽离出来检视时，我们发现这些零散的诉求又会相互冲突。因而我们对其传导逻辑进行了一次整理，选择了最直观的一种策略。当然，如果当前的实现不满足需求时，你可以通过 \",\"paraId\":17,\"tocIndex\":7},{\"value\":\"checkStrictly\",\"paraId\":17,\"tocIndex\":7},{\"value\":\" 自行实现。\",\"paraId\":17,\"tocIndex\":7}];\n  "],"names":[],"mappings":"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"}