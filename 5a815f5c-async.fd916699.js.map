{"version":3,"sources":["docs/blog/color-picker.zh-CN.md?type=text"],"sourcesContent":["\n  import '/home/runner/work/ant-design/ant-design/docs/blog/color-picker.zh-CN.md?watch=parent';\n  export const texts = [{\"value\":\"大家好，我是 \",\"paraId\":0},{\"value\":\"Redjue（红果汁）\",\"paraId\":0},{\"value\":\"，很荣幸今年有机会向 \",\"paraId\":0},{\"value\":\"Ant Design\",\"paraId\":0},{\"value\":\" 贡献了颜色选择器组件 \",\"paraId\":0},{\"value\":\"ColorPicker\",\"paraId\":1},{\"value\":\"，这是一次很棒的学习机会，也让我对 \",\"paraId\":0},{\"value\":\"Ant Design\",\"paraId\":0},{\"value\":\" 的开发流程有了更深入的了解。在这篇文章中，我将分享一下具体的实现过程。\",\"paraId\":0},{\"value\":\"在实现之前我们需要了解一个概念：色彩模型。色彩模型是一种用于描述色彩的数学模型，常见的色彩模型有 \",\"paraId\":2,\"tocIndex\":0},{\"value\":\"RGB\",\"paraId\":2,\"tocIndex\":0},{\"value\":\"、\",\"paraId\":2,\"tocIndex\":0},{\"value\":\"HSV\",\"paraId\":2,\"tocIndex\":0},{\"value\":\"、\",\"paraId\":2,\"tocIndex\":0},{\"value\":\"HEX\",\"paraId\":2,\"tocIndex\":0},{\"value\":\" 等。在这些色彩模型中，\",\"paraId\":2,\"tocIndex\":0},{\"value\":\"RGB\",\"paraId\":2,\"tocIndex\":0},{\"value\":\" 是最常见的色彩模型，也是最容易理解的色彩模型，因此我们先来看一下 \",\"paraId\":2,\"tocIndex\":0},{\"value\":\"RGB\",\"paraId\":2,\"tocIndex\":0},{\"value\":\" 色彩模型。\",\"paraId\":2,\"tocIndex\":0},{\"value\":\"RGB\",\"paraId\":3,\"tocIndex\":1},{\"value\":\" 色彩模型是通过三原色（红、绿、蓝）的不同组合来表示色彩的，每个原色的取值范围是 0-255，三原色的组合可以表示 256\",\"paraId\":3,\"tocIndex\":1},{\"value\":\"3\",\"paraId\":3,\"tocIndex\":1},{\"value\":\" 种颜色，这些颜色可以组成一个立方体，如下图所示： \",\"paraId\":3,\"tocIndex\":1},{\"value\":\"在 \",\"paraId\":4,\"tocIndex\":1},{\"value\":\"RGB\",\"paraId\":4,\"tocIndex\":1},{\"value\":\" 色彩模型中，每个颜色都可以用一个三元组 \",\"paraId\":4,\"tocIndex\":1},{\"value\":\"(R, G, B)\",\"paraId\":4,\"tocIndex\":1},{\"value\":\" 来表示，其中 \",\"paraId\":4,\"tocIndex\":1},{\"value\":\"R\",\"paraId\":4,\"tocIndex\":1},{\"value\":\" 表示红色的取值，\",\"paraId\":4,\"tocIndex\":1},{\"value\":\"G\",\"paraId\":4,\"tocIndex\":1},{\"value\":\" 表示绿色的取值，\",\"paraId\":4,\"tocIndex\":1},{\"value\":\"B\",\"paraId\":4,\"tocIndex\":1},{\"value\":\" 表示蓝色的取值。例如，红色可以表示为 \",\"paraId\":4,\"tocIndex\":1},{\"value\":\"rgb(255, 0, 0)\",\"paraId\":4,\"tocIndex\":1},{\"value\":\"，绿色可以表示为 \",\"paraId\":4,\"tocIndex\":1},{\"value\":\"rgb(0, 255, 0)\",\"paraId\":4,\"tocIndex\":1},{\"value\":\"，蓝色可以表示为 \",\"paraId\":4,\"tocIndex\":1},{\"value\":\"rgb(0, 0, 255)\",\"paraId\":4,\"tocIndex\":1},{\"value\":\"。\",\"paraId\":4,\"tocIndex\":1},{\"value\":\"HSV\",\"paraId\":5,\"tocIndex\":2},{\"value\":\" 色彩模型是通过色相（Hue）、饱和度（Saturation）、明度（Value）来表示色彩的，其中色相的取值范围是 0-360，饱和度和明度的取值范围是 0-100。HSV 色彩模型可以用一个圆锥体来表示，如下图所示： \",\"paraId\":5,\"tocIndex\":2},{\"value\":\"在 \",\"paraId\":6,\"tocIndex\":2},{\"value\":\"HSV\",\"paraId\":6,\"tocIndex\":2},{\"value\":\" 色彩模型中，每个颜色都可以用一个三元组 \",\"paraId\":6,\"tocIndex\":2},{\"value\":\"(H, S, V)\",\"paraId\":6,\"tocIndex\":2},{\"value\":\" 来表示，其中 \",\"paraId\":6,\"tocIndex\":2},{\"value\":\"H\",\"paraId\":6,\"tocIndex\":2},{\"value\":\" 表示色相的取值，\",\"paraId\":6,\"tocIndex\":2},{\"value\":\"S\",\"paraId\":6,\"tocIndex\":2},{\"value\":\" 表示饱和度的取值，\",\"paraId\":6,\"tocIndex\":2},{\"value\":\"V\",\"paraId\":6,\"tocIndex\":2},{\"value\":\" 表示明度的取值。例如，红色可以表示为 \",\"paraId\":6,\"tocIndex\":2},{\"value\":\"hsv(0, 100, 100)\",\"paraId\":6,\"tocIndex\":2},{\"value\":\"，绿色可以表示为 \",\"paraId\":6,\"tocIndex\":2},{\"value\":\"hsv(120, 100, 100)\",\"paraId\":6,\"tocIndex\":2},{\"value\":\"，蓝色可以表示为 \",\"paraId\":6,\"tocIndex\":2},{\"value\":\"hsv(240, 100, 100)\",\"paraId\":6,\"tocIndex\":2},{\"value\":\"。\",\"paraId\":6,\"tocIndex\":2},{\"value\":\"HEX\",\"paraId\":7,\"tocIndex\":3},{\"value\":\" 色彩模型是通过十六进制数来表示色彩的，其中前两位表示红色的取值，中间两位表示绿色的取值，后两位表示蓝色的取值。例如，红色可以表示为 \",\"paraId\":7,\"tocIndex\":3},{\"value\":\"#FF0000\",\"paraId\":7,\"tocIndex\":3},{\"value\":\"，绿色可以表示为 \",\"paraId\":7,\"tocIndex\":3},{\"value\":\"#00FF00\",\"paraId\":7,\"tocIndex\":3},{\"value\":\"，蓝色可以表示为 \",\"paraId\":7,\"tocIndex\":3},{\"value\":\"#0000FF\",\"paraId\":7,\"tocIndex\":3},{\"value\":\"。如下图所示： \",\"paraId\":7,\"tocIndex\":3},{\"value\":\"这也是我们最常见的颜色表示方式，因为它可以直接在 CSS 中使用。而且表示方式非常简单，只需要将 RGB 色彩模型中的三个数字转换为十六进制数即可。\",\"paraId\":8,\"tocIndex\":3},{\"value\":\"颜色模型的转换需要不同的算法，市面上已经有很多成熟的类库可以进行选择，在实现上我们选择了 \",\"paraId\":9,\"tocIndex\":4},{\"value\":\"tinycolor\",\"paraId\":9,\"tocIndex\":4},{\"value\":\" 这个类库，它支持 \",\"paraId\":9,\"tocIndex\":4},{\"value\":\"RGB\",\"paraId\":9,\"tocIndex\":4},{\"value\":\"、\",\"paraId\":9,\"tocIndex\":4},{\"value\":\"HSL\",\"paraId\":9,\"tocIndex\":4},{\"value\":\"、\",\"paraId\":9,\"tocIndex\":4},{\"value\":\"HSV\",\"paraId\":9,\"tocIndex\":4},{\"value\":\"、\",\"paraId\":9,\"tocIndex\":4},{\"value\":\"HEX\",\"paraId\":9,\"tocIndex\":4},{\"value\":\" 等多种色彩模型的转换，而且它的体积非常小，只有 10KB 左右，非常适合在浏览器中使用。\",\"paraId\":9,\"tocIndex\":4},{\"value\":\"由于我们需要实现一个颜色选择器，因此我们需要选择一个色彩模型来表示颜色。从复杂度来说，\",\"paraId\":10,\"tocIndex\":5},{\"value\":\"RGB\",\"paraId\":10,\"tocIndex\":5},{\"value\":\" 色彩模型是最简单的，因为它只需要三个数字就可以表示一个颜色，而且它的取值范围是 0-255，非常容易理解。但是 \",\"paraId\":10,\"tocIndex\":5},{\"value\":\"RGB\",\"paraId\":10,\"tocIndex\":5},{\"value\":\" 色彩模型的缺点也很明显，它的色彩空间是一个立方体，而且在立方体的边缘颜色的变化非常明显，这样的色彩空间并不适合人类的视觉感知。\",\"paraId\":10,\"tocIndex\":5},{\"value\":\"因此，我们需要选择一个更适合人类视觉感知的色彩模型，这里我们选择了 \",\"paraId\":11,\"tocIndex\":5},{\"value\":\"HSV\",\"paraId\":11,\"tocIndex\":5},{\"value\":\" 色彩模型，通过色相、饱和度、明度三个维度来表示颜色，这样的色彩空间更加符合人类的视觉感知，而且在色彩空间的边缘颜色的变化也不会太明显。\",\"paraId\":11,\"tocIndex\":5},{\"value\":\"主要分为三部分实现：颜色面板、选择锚点和滑块。\",\"paraId\":12,\"tocIndex\":6},{\"value\":\"由于我们用了 \",\"paraId\":13,\"tocIndex\":7},{\"value\":\"HSV\",\"paraId\":13,\"tocIndex\":7},{\"value\":\" 的色彩模型，所以我们的需要将色相、饱和度、明度在面板上表示出来。\",\"paraId\":13,\"tocIndex\":7},{\"value\":\"色相\",\"paraId\":14,\"tocIndex\":7},{\"value\":\"background-color: rgb(0, 106, 255);\\n\",\"paraId\":15,\"tocIndex\":7},{\"value\":\"这样我们就得到一个明度和饱和度都为 100% 的蓝色 \",\"paraId\":16,\"tocIndex\":7},{\"value\":\"叠加明度\",\"paraId\":17,\"tocIndex\":7},{\"value\":\"background-color: rgb(0, 106, 255);\\nbackground-image: linear-gradient(0deg, rgb(0, 0, 0), transparent);\\n\",\"paraId\":18,\"tocIndex\":7},{\"value\":\"叠加明度图层后，我们得到了具有明度变化的蓝色 \",\"paraId\":19,\"tocIndex\":7},{\"value\":\"叠加饱和度\",\"paraId\":20,\"tocIndex\":7},{\"value\":\"background-color: rgb(0, 106, 255);\\nbackground-image: linear-gradient(0deg, rgb(0, 0, 0), transparent),\\n  linear-gradient(90deg, rgb(255, 255, 255), rgba(255, 255, 255, 0));\\n\",\"paraId\":21,\"tocIndex\":7},{\"value\":\"叠加饱和度图层后，我们得到了具有明度变化和饱和度变化的蓝色 \",\"paraId\":22,\"tocIndex\":7},{\"value\":\"至此我们就得到了一个拥有完整色相、饱和度、明度的颜色面板。\",\"paraId\":23,\"tocIndex\":7},{\"value\":\"选择锚点的实现比较简单，我们只需要将锚点的偏移位置对应到颜色面板的饱和度、明度即可。\",\"paraId\":24,\"tocIndex\":8},{\"value\":\"...\\nconst { width, height } = containerRef.current.getBoundingClientRect();\\nconst { width: targetWidth, height: targetHeight } = targetRef.current.getBoundingClientRect();\\nconst centerOffsetX = targetWidth / 2;\\nconst centerOffsetY = targetHeight / 2;\\n// 饱和度\\nconst saturation = (offset.x + centerOffsetX) / width;\\n// 明度\\nconst bright = 1 - (offset.y + centerOffsetY) / height;\\n\",\"paraId\":25,\"tocIndex\":8},{\"value\":\"逻辑同上，我们只需要将滑块的偏移位置对应到颜色的色相或不透明度即可。\",\"paraId\":26,\"tocIndex\":9},{\"value\":\"...\\nconst { width, height } = containerRef.current.getBoundingClientRect();\\nconst { width: targetWidth, height: targetHeight } = targetRef.current.getBoundingClientRect();\\nconst centerOffsetX = targetWidth / 2;\\nconst centerOffsetY = targetHeight / 2;\\n// 色相\\nconst hue = ((offset.x + centerOffsetX) / width) * 360;\\n// 不透明度\\nconst alpha = (offset.x + centerOffsetX) / width;\\n\",\"paraId\":27,\"tocIndex\":9},{\"value\":\"至此我们得到了一个完整的颜色选择器，如下图所示： \",\"paraId\":28,\"tocIndex\":9},{\"value\":\"通过这次开发之旅，我对色彩模型有了更深入的了解，也对 \",\"paraId\":29,\"tocIndex\":10},{\"value\":\"Ant Design\",\"paraId\":29,\"tocIndex\":10},{\"value\":\" 的开发流程有了更深入的了解。感谢 \",\"paraId\":29,\"tocIndex\":10},{\"value\":\"Ant Design\",\"paraId\":29,\"tocIndex\":10},{\"value\":\" 团队给我这次机会，也感谢大家的阅读。如果对细节实现感兴趣的童鞋，可以移步 \",\"paraId\":29,\"tocIndex\":10},{\"value\":\"@rc-component/color-picker\",\"paraId\":29,\"tocIndex\":10},{\"value\":\" 查看源码实现。\",\"paraId\":29,\"tocIndex\":10},{\"value\":\"https://zh.wikipedia.org/wiki/%E4%B8%89%E5%8E%9F%E8%89%B2%E5%85%89%E6%A8%A1%E5%BC%8F#/media/File:RGB_color_solid_cube.png\",\"paraId\":30,\"tocIndex\":11},{\"value\":\"https://zh.wikipedia.org/wiki/HSL%E5%92%8CHSV%E8%89%B2%E5%BD%A9%E7%A9%BA%E9%97%B4#/media/File:HSV_cone.png\",\"paraId\":30,\"tocIndex\":11},{\"value\":\"https://zh.wikipedia.org/wiki/%E7%BD%91%E9%A1%B5%E9%A2%9C%E8%89%B2#/media/File:Web_Color_Charts.svg\",\"paraId\":30,\"tocIndex\":11}];\n  "],"names":[],"mappings":"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"}