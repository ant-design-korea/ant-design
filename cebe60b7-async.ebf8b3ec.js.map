{"version":3,"sources":["components/tag/demo/draggable.tsx?techStack=react"],"sourcesContent":["import '/home/runner/work/ant-design/ant-design/components/tag/demo/draggable.tsx?watch=parent';import React, { useState } from 'react';\nimport { closestCenter, DndContext, PointerSensor, useSensor, useSensors } from '@dnd-kit/core';\nimport type { DragEndEvent } from '@dnd-kit/core/dist/types/index';\nimport {\n  arrayMove,\n  horizontalListSortingStrategy,\n  SortableContext,\n  useSortable,\n} from '@dnd-kit/sortable';\nimport { Flex, Tag } from 'antd';\n\ninterface Item {\n  id: number;\n  text: string;\n}\n\ninterface DraggableTagProps {\n  tag: Item;\n}\n\nconst commonStyle: React.CSSProperties = {\n  cursor: 'move',\n  transition: 'unset', // Prevent element from shaking after drag\n};\n\nconst DraggableTag: React.FC<DraggableTagProps> = (props) => {\n  const { tag } = props;\n  const { listeners, transform, transition, isDragging, setNodeRef } = useSortable({ id: tag.id });\n\n  const style = transform\n    ? {\n        ...commonStyle,\n        transform: `translate3d(${transform.x}px, ${transform.y}px, 0)`,\n        transition: isDragging ? 'unset' : transition, // Improve performance/visual effect when dragging\n      }\n    : commonStyle;\n\n  return (\n    <Tag style={style} ref={setNodeRef} {...listeners}>\n      {tag.text}\n    </Tag>\n  );\n};\n\nconst App: React.FC = () => {\n  const [items, setItems] = useState<Item[]>([\n    { id: 1, text: 'Tag 1' },\n    { id: 2, text: 'Tag 2' },\n    { id: 3, text: 'Tag 3' },\n  ]);\n\n  const sensors = useSensors(useSensor(PointerSensor));\n\n  const handleDragEnd = (event: DragEndEvent) => {\n    const { active, over } = event;\n    if (!over) {\n      return;\n    }\n    if (active.id !== over.id) {\n      setItems((data) => {\n        const oldIndex = data.findIndex((item) => item.id === active.id);\n        const newIndex = data.findIndex((item) => item.id === over.id);\n        return arrayMove(data, oldIndex, newIndex);\n      });\n    }\n  };\n\n  return (\n    <DndContext sensors={sensors} onDragEnd={handleDragEnd} collisionDetection={closestCenter}>\n      <SortableContext items={items} strategy={horizontalListSortingStrategy}>\n        <Flex gap=\"4px 0\" wrap>\n          {items.map<React.ReactNode>((item) => (\n            <DraggableTag tag={item} key={item.id} />\n          ))}\n        </Flex>\n      </SortableContext>\n    </DndContext>\n  );\n};\n\nexport default App;\n"],"names":[],"mappings":"qOAgFA,+CAAA,4BAhFO,oBAAyH,gBAChD,gBAOzE,gBACmB,YAW1B,IAAM,EAAmC,CACvC,OAAQ,OACR,WAAY,OACd,EAEM,EAA4C,AAAC,IACjD,GAAM,CAAE,IAAA,CAAG,CAAE,CAAG,EACV,CAAE,UAAA,CAAS,CAAE,UAAA,CAAS,CAAE,WAAA,CAAU,CAAE,WAAA,CAAU,CAAE,WAAA,CAAU,CAAE,CAAG,GAAA,aAAW,EAAC,CAAE,GAAI,EAAI,EAAE,AAAC,GAExF,EAAQ,EACV,CACE,GAAG,CAAW,CACd,UAAW,CAAC,YAAY,EAAE,EAAU,CAAC,CAAC,IAAI,EAAE,EAAU,CAAC,CAAC,MAAM,CAAC,CAC/D,WAAY,EAAa,QAAU,CACrC,EACA,EAEJ,MACE,UAAC,KAAG,EAAC,MAAO,EAAO,IAAK,EAAa,GAAG,CAAS,UAC9C,EAAI,IAAI,GAGf,MAsCA,EApCsB,KACpB,GAAM,CAAC,EAAO,EAAS,CAAG,GAAA,UAAQ,EAAS,CACzC,CAAE,GAAI,EAAG,KAAM,OAAQ,EACvB,CAAE,GAAI,EAAG,KAAM,OAAQ,EACvB,CAAE,GAAI,EAAG,KAAM,OAAQ,EACxB,EAEK,EAAU,GAAA,YAAU,EAAC,GAAA,WAAS,EAAC,eAAa,GAgBlD,MACE,UAAC,YAAU,EAAC,QAAS,EAAS,UAfV,AAAC,IACrB,GAAM,CAAE,OAAA,CAAM,CAAE,KAAA,CAAI,CAAE,CAAG,EACpB,GAGD,EAAO,EAAE,GAAK,EAAK,EAAE,EACvB,EAAS,AAAC,IACR,IAAM,EAAW,EAAK,SAAS,CAAC,AAAC,GAAS,EAAK,EAAE,GAAK,EAAO,EAAE,EACzD,EAAW,EAAK,SAAS,CAAC,AAAC,GAAS,EAAK,EAAE,GAAK,EAAK,EAAE,EAC7D,MAAO,GAAA,WAAS,EAAC,EAAM,EAAU,GACnC,GAEJ,EAG0D,mBAAoB,eAAa,UACvF,UAAC,iBAAe,EAAC,MAAO,EAAO,SAAU,+BAA6B,UACpE,UAAC,MAAI,EAAC,IAAI,QAAQ,IAAI,aACnB,EAAM,GAAG,CAAkB,AAAC,GAC3B,UAAC,GAAa,IAAK,GAAW,EAAK,EAAE,SAMjD"}