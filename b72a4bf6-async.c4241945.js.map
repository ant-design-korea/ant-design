{"version":3,"sources":["docs/blog/config-provider-style.zh-CN.md?type=text"],"sourcesContent":["\n  import '/home/runner/work/ant-design/ant-design/docs/blog/config-provider-style.zh-CN.md?watch=parent';\n  export const texts = [{\"value\":\"Ant Design v5 提供了 Design Token 模型，支持自定义算法实现主题拓展能力。例如 紧凑主题 本身并不携带颜色样式算法，所以可以通过传入多个算法的方式实现 亮色主题下的紧凑主题 以及 暗色主题下的紧凑主题。\",\"paraId\":0},{\"value\":\"而今天，我们现在放下算法部分。讲讲如何通过 ConfigProvider 来拓展主题。\",\"paraId\":1},{\"value\":\"这是我通过 ConfigProvider 来拓展主题的示例，你可以直接在\",\"paraId\":2,\"tocIndex\":0},{\"value\":\"这里\",\"paraId\":2,\"tocIndex\":0},{\"value\":\"查看完整的代码（\",\"paraId\":2,\"tocIndex\":0},{\"value\":\"在线演示\",\"paraId\":2,\"tocIndex\":0},{\"value\":\"）：\",\"paraId\":2,\"tocIndex\":0},{\"value\":\"以下会聊聊在 Ant Design 中如何使用 ConfigProvider 拓展主题。当然这篇文章并不是 CSS 的教程，所以不会去介绍上面的样式实现。如果有兴趣可以直接看看上面的代码地址。\",\"paraId\":3,\"tocIndex\":0},{\"value\":\"Design Token 提供了非常强大的拓展能力，但是同样它也有限制。例如当 Token 并没有支持某些配置时，开发者就变得无能为力了。更有甚者，某些主题实现不能单纯依赖某种 Token 就会变得十分困难。例如在上面例子中的各种渐变边框色不能简单的通过 \",\"paraId\":4,\"tocIndex\":1},{\"value\":\"border-color\",\"paraId\":4,\"tocIndex\":1},{\"value\":\" 来实现，它需要一些 CSS 小技巧。而如\",\"paraId\":4,\"tocIndex\":1},{\"value\":\"《快乐工作主题》\",\"paraId\":5,\"tocIndex\":1},{\"value\":\"我们提到，将一些具体实现落地到 Design Token 会使得代码质量迅速劣化。因而我们需要一些其他的方式来拓展主题，可以统一的修改某个组件的样式。而 ConfigProvider 就是这样的一个入口。\",\"paraId\":4,\"tocIndex\":1},{\"value\":\"在 \",\"paraId\":6,\"tocIndex\":2},{\"value\":\"5.7.0\",\"paraId\":6,\"tocIndex\":2},{\"value\":\" 中，ConfigProvider 支持了所有组件的 \",\"paraId\":6,\"tocIndex\":2},{\"value\":\"className\",\"paraId\":6,\"tocIndex\":2},{\"value\":\" 和 \",\"paraId\":6,\"tocIndex\":2},{\"value\":\"style\",\"paraId\":6,\"tocIndex\":2},{\"value\":\" 配置。因此我们可以很容易进行 Token 之外的拓展：\",\"paraId\":6,\"tocIndex\":2},{\"value\":\"<ConfigProvider\\n  button={{ className: 'my-button' }}\\n  checkbox={{ className: 'my-checkbox' }}\\n  divider={{ className: 'my-divider' }}\\n/>\\n\",\"paraId\":7,\"tocIndex\":2},{\"value\":\"接着我们就可以去添加我们的样式了：\",\"paraId\":8,\"tocIndex\":2},{\"value\":\".my-button {\\n  background: red;\\n}\\n\",\"paraId\":9,\"tocIndex\":2},{\"value\":\"你会发现，这其实奇怪。既然我们可以通过 \",\"paraId\":10,\"tocIndex\":2},{\"value\":\"className\",\"paraId\":10,\"tocIndex\":2},{\"value\":\" 来修改样式，那么为什么还需要 ConfigProvider 呢？我们覆盖 \",\"paraId\":10,\"tocIndex\":2},{\"value\":\".ant-btn\",\"paraId\":10,\"tocIndex\":2},{\"value\":\" 样式不就行了。\",\"paraId\":10,\"tocIndex\":2},{\"value\":\"如果你的项目只由你一个人来维护，这是个不错的主意。但是如果你的项目是一个大型项目，那么你就会发现这样的做法会导致样式冲突。尤其在多人协作的情况下，随意修改样式会出现非预期的结果，而其他人为了覆盖你的样式不得不使用更加复杂的选择器。而 ConfigProvider 则可以很好的解决这个问题，它可以将样式隔离在 ConfigProvider 内部，不会影响到其他组件。\",\"paraId\":11,\"tocIndex\":2},{\"value\":\"上面的示例看起来实现很容易，但是真实场景下你会发现对于层级结构而言不免也有一些不足。比如说 \",\"paraId\":12,\"tocIndex\":3},{\"value\":\"ant-\",\"paraId\":12,\"tocIndex\":3},{\"value\":\" 前缀可以通过 ConfigProvider 的 \",\"paraId\":12,\"tocIndex\":3},{\"value\":\"prefixCls\",\"paraId\":12,\"tocIndex\":3},{\"value\":\" 修改，所以语义化结构的前缀可能从 \",\"paraId\":12,\"tocIndex\":3},{\"value\":\"ant-btn-icon\",\"paraId\":12,\"tocIndex\":3},{\"value\":\" 变成 \",\"paraId\":12,\"tocIndex\":3},{\"value\":\"abc-btn-icon\",\"paraId\":12,\"tocIndex\":3},{\"value\":\"。那么仅通过 \",\"paraId\":12,\"tocIndex\":3},{\"value\":\"my-button\",\"paraId\":12,\"tocIndex\":3},{\"value\":\" 是不足以实现覆盖的：\",\"paraId\":12,\"tocIndex\":3},{\"value\":\".my-button {\\n  // OPS. It's `abc-btn-icon` now.\\n  .ant-btn-icon {\\n    background: red;\\n  }\\n}\\n\",\"paraId\":13,\"tocIndex\":3},{\"value\":\"所以我们的拓展主题也同样需要能够消费 \",\"paraId\":14,\"tocIndex\":3},{\"value\":\"prefixCls\",\"paraId\":14,\"tocIndex\":3},{\"value\":\" 的能力。而在 CSS-in-JS 中，混合 \",\"paraId\":14,\"tocIndex\":3},{\"value\":\"prefixCls\",\"paraId\":14,\"tocIndex\":3},{\"value\":\" 是很容易的事情。我们可以通过 ConfigProvider 的 \",\"paraId\":14,\"tocIndex\":3},{\"value\":\"getPrefixCls\",\"paraId\":14,\"tocIndex\":3},{\"value\":\" 方法来获取 \",\"paraId\":14,\"tocIndex\":3},{\"value\":\"prefixCls\",\"paraId\":14,\"tocIndex\":3},{\"value\":\"，然后进行混合：\",\"paraId\":14,\"tocIndex\":3},{\"value\":\"// This is an example of using `antd-style`, you can use any CSS-in-JS library.\\nimport React from 'react';\\nimport { ConfigProvider } from 'antd';\\nimport { createStyles } from 'antd-style';\\n\\nconst useButtonStyle = () => {\\n  const { getPrefixCls } = React.useContext(ConfigProvider.ConfigContext);\\n  const btnPrefixCls = getPrefixCls('btn');\\n\\n  // Customize styles\\n  return createStyles(({ css }) => ({\\n    btn: css`\\n      background: red;\\n      .${btnPrefixCls}-icon {\\n        color: green;\\n      }\\n    `,\\n  }))();\\n};\\n\\nconst GeekProvider: React.FC<Readonly<React.PropsWithChildren>> = (props) => {\\n  const { styles } = useButtonStyle();\\n  return <ConfigProvider button={{ className: styles.btn }}>{props.children}</ConfigProvider>;\\n};\\n\\nexport default GeekProvider;\\n\",\"paraId\":15,\"tocIndex\":3},{\"value\":\"对需要继承 \",\"paraId\":16,\"tocIndex\":3},{\"value\":\"className\",\"paraId\":16,\"tocIndex\":3},{\"value\":\" 的场景，拓展也很容易：\",\"paraId\":16,\"tocIndex\":3},{\"value\":\"import React from 'react';\\nimport { ConfigProvider } from 'antd';\\n\\nconst GeekProvider: React.FC<Readonly<React.PropsWithChildren>> = (props) => {\\n  const { button } = React.useContext(ConfigProvider.ConfigContext);\\n  const { styles } = useButtonStyle();\\n  return (\\n    <ConfigProvider button={{ className: classNames(button?.className, styles.btn) }}>\\n      {props.children}\\n    </ConfigProvider>\\n  );\\n};\\n\\nexport default GeekProvider;\\n\",\"paraId\":17,\"tocIndex\":3},{\"value\":\"通过 ConfigProvider 可以进一步拓展主题，它可以很好的隔离样式，避免样式冲突。赶快动手试试吧！\",\"paraId\":18,\"tocIndex\":4}];\n  "],"names":[],"mappings":"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"}